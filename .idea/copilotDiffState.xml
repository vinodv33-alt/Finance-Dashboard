<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;personal-finance-dashboard&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;react&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-router-dom&quot;: &quot;^6.8.0&quot;,&#10;    &quot;typescript&quot;: &quot;^4.9.4&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.2.4&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.13&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.21&quot;,&#10;    &quot;chart.js&quot;: &quot;^4.2.1&quot;,&#10;    &quot;react-chartjs-2&quot;: &quot;^5.2.0&quot;,&#10;    &quot;date-fns&quot;: &quot;^2.29.3&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.305.0&quot;,&#10;    &quot;framer-motion&quot;: &quot;^8.5.2&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.43.1&quot;,&#10;    &quot;zod&quot;: &quot;^3.20.2&quot;,&#10;    &quot;@hookform/resolvers&quot;: &quot;^2.9.10&quot;,&#10;    &quot;uuid&quot;: &quot;^9.0.0&quot;,&#10;    &quot;@types/uuid&quot;: &quot;^9.0.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@types/react&quot;: &quot;^18.0.27&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.0.10&quot;,&#10;    &quot;@vitejs/plugin-react&quot;: &quot;^3.1.0&quot;,&#10;    &quot;vite&quot;: &quot;^4.1.0&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;tsc &amp;&amp; vite build&quot;,&#10;    &quot;lint&quot;: &quot;eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;&#10;  },&#10;  &quot;browserslist&quot;: {&#10;    &quot;production&quot;: [&#10;      &quot;&gt;0.2%&quot;,&#10;      &quot;not dead&quot;,&#10;      &quot;not op_mini all&quot;&#10;    ],&#10;    &quot;development&quot;: [&#10;      &quot;last 1 chrome version&quot;,&#10;      &quot;last 1 firefox version&quot;,&#10;      &quot;last 1 safari version&quot;&#10;    ]&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;personal-finance-dashboard&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;react&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-router-dom&quot;: &quot;^6.8.0&quot;,&#10;    &quot;typescript&quot;: &quot;^4.9.4&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.2.4&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.13&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.21&quot;,&#10;    &quot;chart.js&quot;: &quot;^4.2.1&quot;,&#10;    &quot;react-chartjs-2&quot;: &quot;^5.2.0&quot;,&#10;    &quot;date-fns&quot;: &quot;^2.29.3&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.305.0&quot;,&#10;    &quot;framer-motion&quot;: &quot;^8.5.2&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.43.1&quot;,&#10;    &quot;zod&quot;: &quot;^3.20.2&quot;,&#10;    &quot;@hookform/resolvers&quot;: &quot;^2.9.10&quot;,&#10;    &quot;uuid&quot;: &quot;^9.0.0&quot;,&#10;    &quot;@types/uuid&quot;: &quot;^9.0.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@types/react&quot;: &quot;^18.0.27&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.0.10&quot;,&#10;    &quot;@vitejs/plugin-react&quot;: &quot;^3.1.0&quot;,&#10;    &quot;vite&quot;: &quot;^4.1.0&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;vite build&quot;,&#10;    &quot;lint&quot;: &quot;eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;&#10;  },&#10;  &quot;browserslist&quot;: {&#10;    &quot;production&quot;: [&#10;      &quot;&gt;0.2%&quot;,&#10;      &quot;not dead&quot;,&#10;      &quot;not op_mini all&quot;&#10;    ],&#10;    &quot;development&quot;: [&#10;      &quot;last 1 chrome version&quot;,&#10;      &quot;last 1 firefox version&quot;,&#10;      &quot;last 1 safari version&quot;&#10;    ]&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/postcss.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/postcss.config.js" />
              <option name="originalContent" value="export default {&#10;  plugins: {&#10;    tailwindcss: {},&#10;    autoprefixer: {},&#10;  },&#10;}&#10;&#10;" />
              <option name="updatedContent" value="module.exports = {&#10;  plugins: {&#10;    tailwindcss: {},&#10;    autoprefixer: {},&#10;  },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Dashboard/Dashboard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Dashboard/Dashboard.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { motion } from 'framer-motion';&#10;import { useDashboard } from '@/hooks/useFinance';&#10;import DebtSavingsChart from './DebtSavingsChart';&#10;import LoanTable from './LoanTable';&#10;import SummaryCards from './SummaryCards';&#10;import { formatCurrency, formatDate } from '@/utils/calculations';&#10;import LoanProjectionChart from './LoanProjectionChart';&#10;import PartPaymentForm from '@/components/LoanManagement/PartPaymentForm';&#10;&#10;const Dashboard: React.FC = () =&gt; {&#10;  const { dashboardData, lastRefresh, addPartPayment } = useDashboard();&#10;  const [partPaymentLoanId, setPartPaymentLoanId] = useState&lt;string | null&gt;(null);&#10;&#10;  const selectedLoan = partPaymentLoanId&#10;    ? dashboardData.loans.find(l =&gt; l.id === partPaymentLoanId) || null&#10;    : null;&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-8&quot;&gt;&#10;      {/* Auto-refresh indicator */}&#10;      {lastRefresh &amp;&amp; (&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: -10 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;&#10;            Last auto-refreshed on {formatDate(lastRefresh)} â€¢ Next refresh: 5th of next month&#10;          &lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;      )}&#10;&#10;      {/* Summary Cards */}&#10;      &lt;SummaryCards dashboardData={dashboardData} /&gt;&#10;&#10;      {/* Charts Section */}&#10;      &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, scale: 0.95 }}&#10;          animate={{ opacity: 1, scale: 1 }}&#10;          transition={{ delay: 0.2 }}&#10;        &gt;&#10;          &lt;DebtSavingsChart dashboardData={dashboardData} /&gt;&#10;        &lt;/motion.div&gt;&#10;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, scale: 0.95 }}&#10;          animate={{ opacity: 1, scale: 1 }}&#10;          transition={{ delay: 0.3 }}&#10;          className=&quot;glass-card&quot;&#10;        &gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white mb-4&quot;&gt;Financial Overview&lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between items-center p-4 bg-white/5 rounded-lg&quot;&gt;&#10;              &lt;span className=&quot;text-white/70&quot;&gt;Total Outstanding Debt&lt;/span&gt;&#10;              &lt;span className=&quot;text-2xl font-bold text-red-400&quot;&gt;&#10;                {formatCurrency(dashboardData.totalOutstandingDebt)}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex justify-between items-center p-4 bg-white/5 rounded-lg&quot;&gt;&#10;              &lt;span className=&quot;text-white/70&quot;&gt;Total Savings&lt;/span&gt;&#10;              &lt;span className=&quot;text-2xl font-bold text-green-400&quot;&gt;&#10;                {formatCurrency(dashboardData.totalSavings)}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex justify-between items-center p-4 bg-white/5 rounded-lg&quot;&gt;&#10;              &lt;span className=&quot;text-white/70&quot;&gt;Monthly EMI&lt;/span&gt;&#10;              &lt;span className=&quot;text-xl font-semibold text-orange-400&quot;&gt;&#10;                {formatCurrency(dashboardData.monthlyEmi)}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex justify-between items-center p-4 bg-white/5 rounded-lg&quot;&gt;&#10;              &lt;span className=&quot;text-white/70&quot;&gt;Next EMI Date&lt;/span&gt;&#10;              &lt;span className=&quot;text-lg font-medium text-blue-400&quot;&gt;&#10;                {formatDate(dashboardData.nextEmiDate)}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Payment Projection Chart */}&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 20 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ delay: 0.35 }}&#10;      &gt;&#10;        &lt;LoanProjectionChart dashboardData={dashboardData} /&gt;&#10;      &lt;/motion.div&gt;&#10;&#10;      {/* Loan Table with Part Payment action */}&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 20 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ delay: 0.4 }}&#10;      &gt;&#10;        &lt;LoanTable&#10;          loans={dashboardData.loans}&#10;          onPartPayment={(loan) =&gt; setPartPaymentLoanId(loan.id)}&#10;          showActions={true}&#10;        /&gt;&#10;      &lt;/motion.div&gt;&#10;&#10;      {/* Part Payment Modal */}&#10;      {selectedLoan &amp;&amp; partPaymentLoanId &amp;&amp; (&#10;        &lt;PartPaymentForm&#10;          loanId={partPaymentLoanId}&#10;          loan={selectedLoan}&#10;          onSubmit={(data) =&gt; {&#10;            addPartPayment(partPaymentLoanId, data);&#10;            setPartPaymentLoanId(null);&#10;          }}&#10;          onCancel={() =&gt; setPartPaymentLoanId(null)}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Dashboard;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { motion } from 'framer-motion';&#10;import { useDashboard } from '@/hooks/useFinance';&#10;import DebtSavingsChart from './DebtSavingsChart';&#10;import LoanTable from './LoanTable';&#10;import SummaryCards from './SummaryCards';&#10;import { formatCurrency, formatDate } from '@/utils/calculations';&#10;import LoanProjectionChart from './LoanProjectionChart';&#10;import PartPaymentForm from '@/components/LoanManagement/PartPaymentForm';&#10;&#10;const Dashboard: React.FC = () =&gt; {&#10;  const { dashboardData, lastRefresh, addPartPayment, removeLastPartPayment } = useDashboard();&#10;  const [partPaymentLoanId, setPartPaymentLoanId] = useState&lt;string | null&gt;(null);&#10;&#10;  const selectedLoan = partPaymentLoanId&#10;    ? dashboardData.loans.find(l =&gt; l.id === partPaymentLoanId) || null&#10;    : null;&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-8&quot;&gt;&#10;      {/* Auto-refresh indicator */}&#10;      {lastRefresh &amp;&amp; (&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: -10 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;&#10;            Last auto-refreshed on {formatDate(lastRefresh)} â€¢ Next refresh: 5th of next month&#10;          &lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;      )}&#10;&#10;      {/* Summary Cards */}&#10;      &lt;SummaryCards dashboardData={dashboardData} /&gt;&#10;&#10;      {/* Charts Section */}&#10;      &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, scale: 0.95 }}&#10;          animate={{ opacity: 1, scale: 1 }}&#10;          transition={{ delay: 0.2 }}&#10;        &gt;&#10;          &lt;DebtSavingsChart dashboardData={dashboardData} /&gt;&#10;        &lt;/motion.div&gt;&#10;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, scale: 0.95 }}&#10;          animate={{ opacity: 1, scale: 1 }}&#10;          transition={{ delay: 0.3 }}&#10;          className=&quot;glass-card&quot;&#10;        &gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white mb-4&quot;&gt;Financial Overview&lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between items-center p-4 bg-white/5 rounded-lg&quot;&gt;&#10;              &lt;span className=&quot;text-white/70&quot;&gt;Total Outstanding Debt&lt;/span&gt;&#10;              &lt;span className=&quot;text-2xl font-bold text-red-400&quot;&gt;&#10;                {formatCurrency(dashboardData.totalOutstandingDebt)}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex justify-between items-center p-4 bg-white/5 rounded-lg&quot;&gt;&#10;              &lt;span className=&quot;text-white/70&quot;&gt;Total Savings&lt;/span&gt;&#10;              &lt;span className=&quot;text-2xl font-bold text-green-400&quot;&gt;&#10;                {formatCurrency(dashboardData.totalSavings)}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex justify-between items-center p-4 bg-white/5 rounded-lg&quot;&gt;&#10;              &lt;span className=&quot;text-white/70&quot;&gt;Monthly EMI&lt;/span&gt;&#10;              &lt;span className=&quot;text-xl font-semibold text-orange-400&quot;&gt;&#10;                {formatCurrency(dashboardData.monthlyEmi)}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex justify-between items-center p-4 bg-white/5 rounded-lg&quot;&gt;&#10;              &lt;span className=&quot;text-white/70&quot;&gt;Next EMI Date&lt;/span&gt;&#10;              &lt;span className=&quot;text-lg font-medium text-blue-400&quot;&gt;&#10;                {formatDate(dashboardData.nextEmiDate)}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Payment Projection Chart */}&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 20 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ delay: 0.35 }}&#10;      &gt;&#10;        &lt;LoanProjectionChart dashboardData={dashboardData} /&gt;&#10;      &lt;/motion.div&gt;&#10;&#10;      {/* Loan Table with Part Payment action */}&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 20 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ delay: 0.4 }}&#10;      &gt;&#10;        &lt;LoanTable&#10;          loans={dashboardData.loans}&#10;          onPartPayment={(loan) =&gt; setPartPaymentLoanId(loan.id)}&#10;          onUndoLastPartPayment={(loan) =&gt; {&#10;            if (confirm('Undo the last part payment for this loan?')) {&#10;              removeLastPartPayment(loan.id);&#10;            }&#10;          }}&#10;          showActions={true}&#10;        /&gt;&#10;      &lt;/motion.div&gt;&#10;&#10;      {/* Part Payment Modal */}&#10;      {selectedLoan &amp;&amp; partPaymentLoanId &amp;&amp; (&#10;        &lt;PartPaymentForm&#10;          loanId={partPaymentLoanId}&#10;          loan={selectedLoan}&#10;          onSubmit={(data) =&gt; {&#10;            addPartPayment(partPaymentLoanId, data);&#10;            setPartPaymentLoanId(null);&#10;          }}&#10;          onCancel={() =&gt; setPartPaymentLoanId(null)}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Dashboard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Dashboard/DebtSavingsChart.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Dashboard/DebtSavingsChart.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import {&#10;  Chart as ChartJS,&#10;  CategoryScale,&#10;  LinearScale,&#10;  BarElement,&#10;  ArcElement,&#10;  Title,&#10;  Tooltip,&#10;  Legend,&#10;} from 'chart.js';&#10;import { Bar, Doughnut } from 'react-chartjs-2';&#10;import { DashboardData } from '@/types';&#10;import { formatCurrency } from '@/utils/calculations';&#10;&#10;ChartJS.register(&#10;  CategoryScale,&#10;  LinearScale,&#10;  BarElement,&#10;  ArcElement,&#10;  Title,&#10;  Tooltip,&#10;  Legend&#10;);&#10;&#10;interface DebtSavingsChartProps {&#10;  dashboardData: DashboardData;&#10;}&#10;&#10;const DebtSavingsChart: React.FC&lt;DebtSavingsChartProps&gt; = ({ dashboardData }) =&gt; {&#10;  const { totalOutstandingDebt, totalSavings } = dashboardData;&#10;&#10;  // Doughnut chart data for debt vs savings&#10;  const doughnutData = {&#10;    labels: ['Outstanding Debt', 'Total Savings'],&#10;    datasets: [&#10;      {&#10;        data: [totalOutstandingDebt, totalSavings],&#10;        backgroundColor: [&#10;          'rgba(239, 68, 68, 0.8)', // Red for debt&#10;          'rgba(34, 197, 94, 0.8)', // Green for savings&#10;        ],&#10;        borderColor: [&#10;          'rgba(239, 68, 68, 1)',&#10;          'rgba(34, 197, 94, 1)',&#10;        ],&#10;        borderWidth: 2,&#10;      },&#10;    ],&#10;  };&#10;&#10;  // Bar chart data for loan breakdown&#10;  const barData = {&#10;    labels: dashboardData.loans.filter(loan =&gt; loan.isActive).map(loan =&gt; loan.name),&#10;    datasets: [&#10;      {&#10;        label: 'Outstanding Amount',&#10;        data: dashboardData.loans&#10;          .filter(loan =&gt; loan.isActive)&#10;          .map(loan =&gt; loan.currentPrincipal),&#10;        backgroundColor: 'rgba(147, 51, 234, 0.8)',&#10;        borderColor: 'rgba(147, 51, 234, 1)',&#10;        borderWidth: 1,&#10;      },&#10;    ],&#10;  };&#10;&#10;  const chartOptions = {&#10;    responsive: true,&#10;    maintainAspectRatio: false,&#10;    plugins: {&#10;      legend: {&#10;        labels: {&#10;          color: 'rgba(255, 255, 255, 0.8)',&#10;          font: {&#10;            size: 12,&#10;          },&#10;        },&#10;      },&#10;      tooltip: {&#10;        backgroundColor: 'rgba(0, 0, 0, 0.8)',&#10;        titleColor: 'white',&#10;        bodyColor: 'white',&#10;        callbacks: {&#10;          label: function(context: any) {&#10;            return `${context.label}: ${formatCurrency(context.parsed || context.raw)}`;&#10;          },&#10;        },&#10;      },&#10;    },&#10;    scales: {&#10;      y: {&#10;        ticks: {&#10;          color: 'rgba(255, 255, 255, 0.6)',&#10;          callback: function(value: any) {&#10;            return formatCurrency(value);&#10;          },&#10;        },&#10;        grid: {&#10;          color: 'rgba(255, 255, 255, 0.1)',&#10;        },&#10;      },&#10;      x: {&#10;        ticks: {&#10;          color: 'rgba(255, 255, 255, 0.6)',&#10;        },&#10;        grid: {&#10;          color: 'rgba(255, 255, 255, 0.1)',&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const doughnutOptions = {&#10;    responsive: true,&#10;    maintainAspectRatio: false,&#10;    plugins: {&#10;      legend: {&#10;        position: 'bottom' as const,&#10;        labels: {&#10;          color: 'rgba(255, 255, 255, 0.8)',&#10;          padding: 20,&#10;          font: {&#10;            size: 12,&#10;          },&#10;        },&#10;      },&#10;      tooltip: {&#10;        backgroundColor: 'rgba(0, 0, 0, 0.8)',&#10;        titleColor: 'white',&#10;        bodyColor: 'white',&#10;        callbacks: {&#10;          label: function(context: any) {&#10;            const total = context.dataset.data.reduce((a: number, b: number) =&gt; a + b, 0);&#10;            const percentage = ((context.raw / total) * 100).toFixed(1);&#10;            return `${context.label}: ${formatCurrency(context.raw)} (${percentage}%)`;&#10;          },&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;glass-card&quot;&gt;&#10;      &lt;h3 className=&quot;text-xl font-semibold text-white mb-6&quot;&gt;Financial Overview&lt;/h3&gt;&#10;      &#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;        {/* Debt vs Savings Doughnut Chart */}&#10;        &lt;div className=&quot;h-64&quot;&gt;&#10;          &lt;h4 className=&quot;text-lg font-medium text-white/90 mb-4 text-center&quot;&gt;&#10;            Debt vs Savings&#10;          &lt;/h4&gt;&#10;          {totalOutstandingDebt &gt; 0 || totalSavings &gt; 0 ? (&#10;            &lt;Doughnut data={doughnutData} options={doughnutOptions} /&gt;&#10;          ) : (&#10;            &lt;div className=&quot;flex items-center justify-center h-full text-white/60&quot;&gt;&#10;              No data available&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Loan Breakdown Bar Chart */}&#10;        &lt;div className=&quot;h-64&quot;&gt;&#10;          &lt;h4 className=&quot;text-lg font-medium text-white/90 mb-4 text-center&quot;&gt;&#10;            Loan Breakdown&#10;          &lt;/h4&gt;&#10;          {dashboardData.loans.filter(loan =&gt; loan.isActive).length &gt; 0 ? (&#10;            &lt;Bar data={barData} options={chartOptions} /&gt;&#10;          ) : (&#10;            &lt;div className=&quot;flex items-center justify-center h-full text-white/60&quot;&gt;&#10;              No active loans&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Net Worth Indicator */}&#10;      &lt;div className=&quot;mt-6 p-4 bg-white/5 rounded-lg&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Net Worth&lt;/p&gt;&#10;          &lt;p className={`text-2xl font-bold ${&#10;            totalSavings - totalOutstandingDebt &gt;= 0 ? 'text-green-400' : 'text-red-400'&#10;          }`}&gt;&#10;            {formatCurrency(totalSavings - totalOutstandingDebt)}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default DebtSavingsChart;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Dashboard/LoanTable.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Dashboard/LoanTable.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { motion } from 'framer-motion';&#10;import { Loan } from '@/types';&#10;import { calculateLoanDetails, formatCurrency, formatDate } from '@/utils/calculations';&#10;import { Edit, Trash2, DollarSign, TrendingDown, RotateCcw } from 'lucide-react';&#10;&#10;interface LoanTableProps {&#10;  loans: Loan[];&#10;  onEdit?: (loan: Loan) =&gt; void;&#10;  onDelete?: (loanId: string) =&gt; void;&#10;  onPartPayment?: (loan: Loan) =&gt; void;&#10;  onUndoLastPartPayment?: (loan: Loan) =&gt; void;&#10;  showActions?: boolean;&#10;}&#10;&#10;const LoanTable: React.FC&lt;LoanTableProps&gt; = ({&#10;  loans,&#10;  onEdit,&#10;  onDelete,&#10;  onPartPayment,&#10;  onUndoLastPartPayment,&#10;  showActions = false&#10;}) =&gt; {&#10;  const activeLoans = loans.filter(loan =&gt; loan.isActive);&#10;&#10;  if (activeLoans.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;glass-card text-center py-12&quot;&gt;&#10;        &lt;DollarSign className=&quot;w-16 h-16 text-white/30 mx-auto mb-4&quot; /&gt;&#10;        &lt;h3 className=&quot;text-xl font-semibold text-white/70 mb-2&quot;&gt;No Active Loans&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/50&quot;&gt;Add your first loan to get started with tracking&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;glass-card overflow-hidden&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;        &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;Loan Details&lt;/h3&gt;&#10;        &lt;span className=&quot;text-white/70 text-sm&quot;&gt;&#10;          {activeLoans.length} active loan{activeLoans.length !== 1 ? 's' : ''}&#10;        &lt;/span&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;        &lt;table className=&quot;w-full&quot;&gt;&#10;          &lt;thead&gt;&#10;            &lt;tr className=&quot;border-b border-white/10&quot;&gt;&#10;              &lt;th className=&quot;text-left py-4 px-6 text-white/90 font-semibold&quot;&gt;Loan Name&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;Principal Amount&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;Interest Rate&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;EMI Amount&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;EMIs Remaining&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;Next EMI Date&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;Outstanding&lt;/th&gt;&#10;              {showActions &amp;&amp; (&#10;                &lt;th className=&quot;text-center py-4 px-6 text-white/90 font-semibold&quot;&gt;Actions&lt;/th&gt;&#10;              )}&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody&gt;&#10;            {activeLoans.map((loan, index) =&gt; {&#10;              const details = calculateLoanDetails(loan);&#10;              return (&#10;                &lt;motion.tr&#10;                  key={loan.id}&#10;                  initial={{ opacity: 0, y: 20 }}&#10;                  animate={{ opacity: 1, y: 0 }}&#10;                  transition={{ delay: index * 0.05 }}&#10;                  className=&quot;border-b border-white/5 hover:bg-white/5 transition-colors&quot;&#10;                &gt;&#10;                  &lt;td className=&quot;py-4 px-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;span className=&quot;text-white font-medium&quot;&gt;{loan.name}&lt;/span&gt;&#10;                      {loan.partPayments.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-xs text-green-400 mt-1&quot;&gt;&#10;                          {loan.partPayments.length} part payment{loan.partPayments.length !== 1 ? 's' : ''}&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    {formatCurrency(loan.principalAmount)}&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    {Number(loan.interestRate).toFixed(2)}%&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    {formatCurrency(details.emiAmount)}&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    &lt;span className={`${details.remainingEmis &lt;= 12 ? 'text-orange-400' : 'text-white/80'}`}&gt;&#10;                      {details.remainingEmis}&#10;                    &lt;/span&gt;&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    {formatDate(details.nextEmiDate)}&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right&quot;&gt;&#10;                    &lt;span className=&quot;text-red-400 font-semibold&quot;&gt;&#10;                      {formatCurrency(Number(loan.currentPrincipal))}&#10;                    &lt;/span&gt;&#10;                  &lt;/td&gt;&#10;                  {showActions &amp;&amp; (&#10;                    &lt;td className=&quot;py-4 px-6&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-center space-x-2&quot;&gt;&#10;                        {onEdit &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; onEdit?.(loan)}&#10;                            className=&quot;p-2 text-white/60 hover:text-blue-400 transition-colors&quot;&#10;                            title=&quot;Edit Loan&quot;&#10;                          &gt;&#10;                            &lt;Edit className=&quot;w-4 h-4&quot; /&gt;&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {onPartPayment &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; onPartPayment?.(loan)}&#10;                            className=&quot;p-2 text-white/60 hover:text-green-400 transition-colors&quot;&#10;                            title=&quot;Make Part Payment&quot;&#10;                          &gt;&#10;                            &lt;TrendingDown className=&quot;w-4 h-4&quot; /&gt;&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {onUndoLastPartPayment &amp;&amp; loan.partPayments.length &gt; 0 &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; onUndoLastPartPayment?.(loan)}&#10;                            className=&quot;p-2 text-white/60 hover:text-yellow-400 transition-colors&quot;&#10;                            title=&quot;Undo Last Part Payment&quot;&#10;                          &gt;&#10;                            &lt;RotateCcw className=&quot;w-4 h-4&quot; /&gt;&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {onDelete &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; onDelete?.(loan.id)}&#10;                            className=&quot;p-2 text-white/60 hover:text-red-400 transition-colors&quot;&#10;                            title=&quot;Delete Loan&quot;&#10;                          &gt;&#10;                            &lt;Trash2 className=&quot;w-4 h-4&quot; /&gt;&#10;                          &lt;/button&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/td&gt;&#10;                  )}&#10;                &lt;/motion.tr&gt;&#10;              );&#10;            })}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Summary row */}&#10;      &lt;div className=&quot;border-t border-white/10 mt-4 pt-4&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;          &lt;span className=&quot;text-white/70 font-medium&quot;&gt;Total Outstanding Debt:&lt;/span&gt;&#10;          &lt;span className=&quot;text-xl font-bold text-red-400&quot;&gt;&#10;            {formatCurrency(&#10;              activeLoans.reduce((total, loan) =&gt; {&#10;                return total + Number(loan.currentPrincipal);&#10;              }, 0)&#10;            )}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LoanTable;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { motion } from 'framer-motion';&#10;import { Loan } from '@/types';&#10;import { calculateLoanDetails, formatCurrency, formatDate } from '@/utils/calculations';&#10;import { Edit, Trash2, DollarSign, TrendingDown, RotateCcw } from 'lucide-react';&#10;&#10;interface LoanTableProps {&#10;  loans: Loan[];&#10;  onEdit?: (loan: Loan) =&gt; void;&#10;  onDelete?: (loanId: string) =&gt; void;&#10;  onPartPayment?: (loan: Loan) =&gt; void;&#10;  onUndoLastPartPayment?: (loan: Loan) =&gt; void;&#10;  showActions?: boolean;&#10;}&#10;&#10;const LoanTable: React.FC&lt;LoanTableProps&gt; = ({&#10;  loans,&#10;  onEdit,&#10;  onDelete,&#10;  onPartPayment,&#10;  onUndoLastPartPayment,&#10;  showActions = false&#10;}) =&gt; {&#10;  const activeLoans = loans.filter(loan =&gt; loan.isActive);&#10;&#10;  if (activeLoans.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;glass-card text-center py-12&quot;&gt;&#10;        &lt;DollarSign className=&quot;w-16 h-16 text-white/30 mx-auto mb-4&quot; /&gt;&#10;        &lt;h3 className=&quot;text-xl font-semibold text-white/70 mb-2&quot;&gt;No Active Loans&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/50&quot;&gt;Add your first loan to get started with tracking&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;glass-card overflow-hidden&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;        &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;Loan Details&lt;/h3&gt;&#10;        &lt;span className=&quot;text-white/70 text-sm&quot;&gt;&#10;          {activeLoans.length} active loan{activeLoans.length !== 1 ? 's' : ''}&#10;        &lt;/span&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;        &lt;table className=&quot;w-full&quot;&gt;&#10;          &lt;thead&gt;&#10;            &lt;tr className=&quot;border-b border-white/10&quot;&gt;&#10;              &lt;th className=&quot;text-left py-4 px-6 text-white/90 font-semibold&quot;&gt;Loan Name&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;Principal Amount&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;Interest Rate&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;EMI Amount&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;EMIs Remaining&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;Next EMI Date&lt;/th&gt;&#10;              &lt;th className=&quot;text-right py-4 px-6 text-white/90 font-semibold&quot;&gt;Outstanding&lt;/th&gt;&#10;              {showActions &amp;&amp; (&#10;                &lt;th className=&quot;text-center py-4 px-6 text-white/90 font-semibold&quot;&gt;Actions&lt;/th&gt;&#10;              )}&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody&gt;&#10;            {activeLoans.map((loan, index) =&gt; {&#10;              const details = calculateLoanDetails(loan);&#10;              return (&#10;                &lt;motion.tr&#10;                  key={loan.id}&#10;                  initial={{ opacity: 0, y: 20 }}&#10;                  animate={{ opacity: 1, y: 0 }}&#10;                  transition={{ delay: index * 0.05 }}&#10;                  className=&quot;border-b border-white/5 hover:bg-white/5 transition-colors&quot;&#10;                &gt;&#10;                  &lt;td className=&quot;py-4 px-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;span className=&quot;text-white font-medium&quot;&gt;{loan.name}&lt;/span&gt;&#10;                      {loan.partPayments.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-xs text-green-400 mt-1&quot;&gt;&#10;                          {loan.partPayments.length} part payment{loan.partPayments.length !== 1 ? 's' : ''}&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    {formatCurrency(loan.principalAmount)}&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    {Number(loan.interestRate).toFixed(2)}%&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    {formatCurrency(details.emiAmount)}&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    &lt;span className={`${details.remainingEmis &lt;= 12 ? 'text-orange-400' : 'text-white/80'}`}&gt;&#10;                      {details.remainingEmis}&#10;                    &lt;/span&gt;&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right text-white/80&quot;&gt;&#10;                    {formatDate(details.nextEmiDate)}&#10;                  &lt;/td&gt;&#10;                  &lt;td className=&quot;py-4 px-6 text-right&quot;&gt;&#10;                    &lt;span className=&quot;text-red-400 font-semibold&quot;&gt;&#10;                      {formatCurrency(details.remainingPrincipal)}&#10;                    &lt;/span&gt;&#10;                  &lt;/td&gt;&#10;                  {showActions &amp;&amp; (&#10;                    &lt;td className=&quot;py-4 px-6&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-center space-x-2&quot;&gt;&#10;                        {onEdit &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; onEdit?.(loan)}&#10;                            className=&quot;p-2 text-white/60 hover:text-blue-400 transition-colors&quot;&#10;                            title=&quot;Edit Loan&quot;&#10;                          &gt;&#10;                            &lt;Edit className=&quot;w-4 h-4&quot; /&gt;&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {onPartPayment &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; onPartPayment?.(loan)}&#10;                            className=&quot;p-2 text-white/60 hover:text-green-400 transition-colors&quot;&#10;                            title=&quot;Make Part Payment&quot;&#10;                          &gt;&#10;                            &lt;TrendingDown className=&quot;w-4 h-4&quot; /&gt;&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {onUndoLastPartPayment &amp;&amp; loan.partPayments.length &gt; 0 &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; onUndoLastPartPayment?.(loan)}&#10;                            className=&quot;p-2 text-white/60 hover:text-yellow-400 transition-colors&quot;&#10;                            title=&quot;Undo Last Part Payment&quot;&#10;                          &gt;&#10;                            &lt;RotateCcw className=&quot;w-4 h-4&quot; /&gt;&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {onDelete &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; onDelete?.(loan.id)}&#10;                            className=&quot;p-2 text-white/60 hover:text-red-400 transition-colors&quot;&#10;                            title=&quot;Delete Loan&quot;&#10;                          &gt;&#10;                            &lt;Trash2 className=&quot;w-4 h-4&quot; /&gt;&#10;                          &lt;/button&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/td&gt;&#10;                  )}&#10;                &lt;/motion.tr&gt;&#10;              );&#10;            })}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Summary row */}&#10;      &lt;div className=&quot;border-t border-white/10 mt-4 pt-4&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;          &lt;span className=&quot;text-white/70 font-medium&quot;&gt;Total Outstanding Debt:&lt;/span&gt;&#10;          &lt;span className=&quot;text-xl font-bold text-red-400&quot;&gt;&#10;            {formatCurrency(&#10;              activeLoans.reduce((total, loan) =&gt; {&#10;                const d = calculateLoanDetails(loan);&#10;                return total + d.remainingPrincipal;&#10;              }, 0)&#10;            )}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LoanTable;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Dashboard/SummaryCards.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Dashboard/SummaryCards.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { motion } from 'framer-motion';&#10;import { DashboardData } from '@/types';&#10;import { formatCurrency } from '@/utils/calculations';&#10;import { TrendingUp, TrendingDown, DollarSign, Calendar } from 'lucide-react';&#10;&#10;interface SummaryCardsProps {&#10;  dashboardData: DashboardData;&#10;}&#10;&#10;const SummaryCards: React.FC&lt;SummaryCardsProps&gt; = ({ dashboardData }) =&gt; {&#10;  const cards = [&#10;    {&#10;      title: 'Total Outstanding Debt',&#10;      value: dashboardData.totalOutstandingDebt,&#10;      icon: TrendingDown,&#10;      color: 'text-red-400',&#10;      bgColor: 'bg-red-500/10',&#10;      trend: null,&#10;    },&#10;    {&#10;      title: 'Total Savings',&#10;      value: dashboardData.totalSavings,&#10;      icon: TrendingUp,&#10;      color: 'text-green-400',&#10;      bgColor: 'bg-green-500/10',&#10;      trend: null,&#10;    },&#10;    {&#10;      title: 'Monthly EMI',&#10;      value: dashboardData.monthlyEmi,&#10;      icon: DollarSign,&#10;      color: 'text-orange-400',&#10;      bgColor: 'bg-orange-500/10',&#10;      trend: null,&#10;    },&#10;    {&#10;      title: 'Active Loans',&#10;      value: dashboardData.loans.filter(loan =&gt; loan.isActive).length,&#10;      icon: Calendar,&#10;      color: 'text-blue-400',&#10;      bgColor: 'bg-blue-500/10',&#10;      trend: null,&#10;      isCount: true,&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;      {cards.map((card, index) =&gt; (&#10;        &lt;motion.div&#10;          key={card.title}&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: index * 0.1 }}&#10;          className=&quot;glass-card hover:scale-105 transition-transform duration-300&quot;&#10;        &gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;p className=&quot;text-white/70 text-sm font-medium&quot;&gt;{card.title}&lt;/p&gt;&#10;              &lt;p className={`text-2xl font-bold ${card.color} mt-2`}&gt;&#10;                {card.isCount ? card.value : formatCurrency(card.value)}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className={`p-3 rounded-lg ${card.bgColor}`}&gt;&#10;              &lt;card.icon className={`w-6 h-6 ${card.color}`} /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default SummaryCards;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/DataManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/DataManagement.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { motion } from 'framer-motion';&#10;import { storage } from '@/utils/storage';&#10;import { Download, Upload, Trash2, AlertTriangle, CheckCircle } from 'lucide-react';&#10;&#10;const DataManagement: React.FC = () =&gt; {&#10;  const [message, setMessage] = useState&lt;{ type: 'success' | 'error'; text: string } | null&gt;(null);&#10;  const [showClearConfirm, setShowClearConfirm] = useState(false);&#10;&#10;  const handleExportData = () =&gt; {&#10;    try {&#10;      const exportData = storage.exportData();&#10;      const blob = new Blob([exportData], { type: 'application/json' });&#10;      const url = URL.createObjectURL(blob);&#10;      const link = document.createElement('a');&#10;      link.href = url;&#10;      link.download = `finance-dashboard-backup-${new Date().toISOString().split('T')[0]}.json`;&#10;      document.body.appendChild(link);&#10;      link.click();&#10;      document.body.removeChild(link);&#10;      URL.revokeObjectURL(url);&#10;&#10;      setMessage({ type: 'success', text: 'Data exported successfully!' });&#10;      setTimeout(() =&gt; setMessage(null), 3000);&#10;    } catch (error) {&#10;      setMessage({ type: 'error', text: 'Failed to export data.' });&#10;      setTimeout(() =&gt; setMessage(null), 3000);&#10;    }&#10;  };&#10;&#10;  const handleImportData = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    const file = event.target.files?.[0];&#10;    if (!file) return;&#10;&#10;    const reader = new FileReader();&#10;    reader.onload = (e) =&gt; {&#10;      try {&#10;        const content = e.target?.result as string;&#10;        const result = storage.importData(content);&#10;        &#10;        setMessage({ &#10;          type: result.success ? 'success' : 'error', &#10;          text: result.message &#10;        });&#10;        &#10;        if (result.success) {&#10;          // Refresh the page to load the imported data&#10;          setTimeout(() =&gt; window.location.reload(), 1500);&#10;        }&#10;        &#10;        setTimeout(() =&gt; setMessage(null), 3000);&#10;      } catch (error) {&#10;        setMessage({ type: 'error', text: 'Failed to read file.' });&#10;        setTimeout(() =&gt; setMessage(null), 3000);&#10;      }&#10;    };&#10;    reader.readAsText(file);&#10;    &#10;    // Reset file input&#10;    event.target.value = '';&#10;  };&#10;&#10;  const handleClearData = () =&gt; {&#10;    storage.clearAll();&#10;    setMessage({ type: 'success', text: 'All data cleared successfully!' });&#10;    setShowClearConfirm(false);&#10;    setTimeout(() =&gt; {&#10;      setMessage(null);&#10;      window.location.reload();&#10;    }, 1500);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;glass-card&quot;&gt;&#10;      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;        &lt;Download className=&quot;w-6 h-6 text-blue-400&quot; /&gt;&#10;        &lt;div&gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;Data Management&lt;/h3&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Export, import, or clear your financial data&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Message */}&#10;      {message &amp;&amp; (&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: -10 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          className={`p-3 rounded-lg mb-4 flex items-center space-x-2 ${&#10;            message.type === 'success' &#10;              ? 'bg-green-500/20 border border-green-500/30 text-green-400' &#10;              : 'bg-red-500/20 border border-red-500/30 text-red-400'&#10;          }`}&#10;        &gt;&#10;          {message.type === 'success' ? &lt;CheckCircle className=&quot;w-4 h-4&quot; /&gt; : &lt;AlertTriangle className=&quot;w-4 h-4&quot; /&gt;}&#10;          &lt;span&gt;{message.text}&lt;/span&gt;&#10;        &lt;/motion.div&gt;&#10;      )}&#10;&#10;      &lt;div className=&quot;space-y-4&quot;&gt;&#10;        {/* Export Data */}&#10;        &lt;div className=&quot;flex items-center justify-between p-4 bg-white/5 rounded-lg&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h4 className=&quot;font-medium text-white&quot;&gt;Export Data&lt;/h4&gt;&#10;            &lt;p className=&quot;text-white/60 text-sm&quot;&gt;Download a backup of all your financial data&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;button&#10;            onClick={handleExportData}&#10;            className=&quot;glass-button bg-blue-500/20 hover:bg-blue-500/30 flex items-center space-x-2&quot;&#10;          &gt;&#10;            &lt;Download className=&quot;w-4 h-4&quot; /&gt;&#10;            &lt;span&gt;Export&lt;/span&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Import Data */}&#10;        &lt;div className=&quot;flex items-center justify-between p-4 bg-white/5 rounded-lg&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h4 className=&quot;font-medium text-white&quot;&gt;Import Data&lt;/h4&gt;&#10;            &lt;p className=&quot;text-white/60 text-sm&quot;&gt;Restore data from a previously exported backup&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;label className=&quot;glass-button bg-green-500/20 hover:bg-green-500/30 flex items-center space-x-2 cursor-pointer&quot;&gt;&#10;            &lt;Upload className=&quot;w-4 h-4&quot; /&gt;&#10;            &lt;span&gt;Import&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;file&quot;&#10;              accept=&quot;.json&quot;&#10;              onChange={handleImportData}&#10;              className=&quot;hidden&quot;&#10;            /&gt;&#10;          &lt;/label&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Clear Data */}&#10;        &lt;div className=&quot;flex items-center justify-between p-4 bg-white/5 rounded-lg&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h4 className=&quot;font-medium text-white&quot;&gt;Clear All Data&lt;/h4&gt;&#10;            &lt;p className=&quot;text-white/60 text-sm&quot;&gt;Permanently delete all stored financial data&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          {!showClearConfirm ? (&#10;            &lt;button&#10;              onClick={() =&gt; setShowClearConfirm(true)}&#10;              className=&quot;glass-button bg-red-500/20 hover:bg-red-500/30 flex items-center space-x-2&quot;&#10;            &gt;&#10;              &lt;Trash2 className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;span&gt;Clear&lt;/span&gt;&#10;            &lt;/button&gt;&#10;          ) : (&#10;            &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleClearData}&#10;                className=&quot;px-3 py-2 bg-red-500/30 text-red-400 rounded-lg text-sm hover:bg-red-500/40&quot;&#10;              &gt;&#10;                Confirm&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setShowClearConfirm(false)}&#10;                className=&quot;px-3 py-2 bg-gray-500/20 text-white/70 rounded-lg text-sm hover:bg-gray-500/30&quot;&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Storage Information */}&#10;      &lt;div className=&quot;mt-6 p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg&quot;&gt;&#10;        &lt;div className=&quot;flex items-start space-x-2&quot;&gt;&#10;          &lt;AlertTriangle className=&quot;w-5 h-5 text-yellow-400 mt-0.5&quot; /&gt;&#10;          &lt;div&gt;&#10;            &lt;h4 className=&quot;text-yellow-400 font-medium mb-1&quot;&gt;Data Storage Information&lt;/h4&gt;&#10;            &lt;ul className=&quot;text-white/80 text-sm space-y-1&quot;&gt;&#10;              &lt;li&gt;â€¢ Data is stored locally in your browser's localStorage&lt;/li&gt;&#10;              &lt;li&gt;â€¢ Data is browser-specific and won't sync across different browsers&lt;/li&gt;&#10;              &lt;li&gt;â€¢ Regular exports are recommended to prevent data loss&lt;/li&gt;&#10;              &lt;li&gt;â€¢ Clearing browser data will delete all your financial information&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default DataManagement;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/LoanManagement/LoanForm.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/LoanManagement/LoanForm.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { useForm } from 'react-hook-form';&#10;import { motion } from 'framer-motion';&#10;import { Loan } from '@/types';&#10;import { calculateEMI } from '@/utils/calculations';&#10;import { X, Calculator } from 'lucide-react';&#10;import { addMonths } from 'date-fns';&#10;&#10;interface LoanFormProps {&#10;  loan?: Loan;&#10;  onSubmit: (data: Omit&lt;Loan, 'id'&gt;) =&gt; void;&#10;  onCancel: () =&gt; void;&#10;  title: string;&#10;}&#10;&#10;interface FormData {&#10;  name: string;&#10;  principalAmount: number;&#10;  interestRate: number;&#10;  tenure: number;&#10;  startDate: string;&#10;  customEmi?: number;&#10;  useCustomEmi: boolean;&#10;}&#10;&#10;const LoanForm: React.FC&lt;LoanFormProps&gt; = ({ loan, onSubmit, onCancel, title }) =&gt; {&#10;  // Check if the existing loan has a custom EMI (different from calculated EMI)&#10;  const hasCustomEmi = loan ? (() =&gt; {&#10;    const calculatedEmi = calculateEMI(loan.principalAmount, Number(loan.interestRate), loan.tenure);&#10;    return Math.abs(Number(loan.emiAmount) - calculatedEmi) &gt; 1; // Allow small rounding differences&#10;  })() : false;&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    watch,&#10;    setValue,&#10;    formState: { errors }&#10;  } = useForm&lt;FormData&gt;({&#10;    defaultValues: {&#10;      name: loan?.name || '',&#10;      principalAmount: Number(loan?.principalAmount) || 0,&#10;      interestRate: Number(loan?.interestRate) || 0,&#10;      tenure: Number(loan?.tenure) || 0,&#10;      startDate: loan?.startDate ? loan.startDate.toISOString().split('T')[0] : '',&#10;      customEmi: loan?.useCustomEmi ? Number(loan.customEmi) ?? Number(loan?.emiAmount) || 0 : Number(loan?.emiAmount) || 0,&#10;      useCustomEmi: loan?.useCustomEmi ?? hasCustomEmi&#10;    }&#10;  });&#10;&#10;  const watchedValues = watch(['principalAmount', 'interestRate', 'tenure', 'useCustomEmi', 'customEmi']);&#10;  const [principal, rate, tenure, useCustomEmi, customEmi] = watchedValues;&#10;&#10;  // Calculate EMI automatically&#10;  const calculatedEmi = principal &amp;&amp; rate &amp;&amp; tenure&#10;    ? calculateEMI(principal, rate, tenure)&#10;    : 0;&#10;&#10;  const handleFormSubmit = (data: FormData) =&gt; {&#10;    const startDate = new Date(data.startDate);&#10;&#10;    // Use custom EMI if selected, otherwise use calculated EMI&#10;    const emiAmount = data.useCustomEmi &amp;&amp; data.customEmi ? Number(data.customEmi) : calculatedEmi;&#10;&#10;    const loanData: Omit&lt;Loan, 'id'&gt; = {&#10;      name: data.name,&#10;      principalAmount: Number(data.principalAmount),&#10;      currentPrincipal: loan ? loan.currentPrincipal : Number(data.principalAmount),&#10;      interestRate: Number(data.interestRate),&#10;      emiAmount: Number(emiAmount),&#10;      // persist custom EMI settings&#10;      useCustomEmi: Boolean(data.useCustomEmi),&#10;      customEmi: data.useCustomEmi ? Number(data.customEmi) || Number(emiAmount) : undefined,&#10;      startDate,&#10;      tenure: Number(data.tenure),&#10;      nextEmiDate: addMonths(startDate, 1),&#10;      isActive: true,&#10;      partPayments: loan?.partPayments || [],&#10;      interestRateChanges: loan?.interestRateChanges || []&#10;    };&#10;&#10;    onSubmit(loanData);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, scale: 0.95 }}&#10;        animate={{ opacity: 1, scale: 1 }}&#10;        exit={{ opacity: 0, scale: 0.95 }}&#10;        className=&quot;glass-card w-full max-w-2xl max-h-[90vh] overflow-y-auto&quot;&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;{title}&lt;/h3&gt;&#10;          &lt;button&#10;            onClick={onCancel}&#10;            className=&quot;p-2 text-white/60 hover:text-white transition-colors&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit(handleFormSubmit)} className=&quot;space-y-6&quot;&gt;&#10;          {/* Loan Name */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Loan Name *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('name', { required: 'Loan name is required' })}&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;e.g., Home Loan, Car Loan&quot;&#10;            /&gt;&#10;            {errors.name &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.name.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Principal Amount */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Principal Amount (â‚¹) *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('principalAmount', {&#10;                required: 'Principal amount is required',&#10;                min: { value: 1000, message: 'Minimum amount is â‚¹1,000' }&#10;              })}&#10;              type=&quot;number&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;1000000&quot;&#10;            /&gt;&#10;            {errors.principalAmount &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.principalAmount.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;            {/* Interest Rate */}&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;                Interest Rate (% p.a.) *&#10;              &lt;/label&gt;&#10;              &lt;input&#10;                {...register('interestRate', {&#10;                  required: 'Interest rate is required',&#10;                  min: { value: 0.1, message: 'Minimum rate is 0.1%' },&#10;                  max: { value: 50, message: 'Maximum rate is 50%' }&#10;                })}&#10;                type=&quot;number&quot;&#10;                step=&quot;0.01&quot;&#10;                className=&quot;glass-input w-full&quot;&#10;                placeholder=&quot;8.5&quot;&#10;              /&gt;&#10;              {errors.interestRate &amp;&amp; (&#10;                &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.interestRate.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Tenure */}&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;                Tenure (Months) *&#10;              &lt;/label&gt;&#10;              &lt;input&#10;                {...register('tenure', {&#10;                  required: 'Tenure is required',&#10;                  min: { value: 1, message: 'Minimum tenure is 1 month' },&#10;                  max: { value: 360, message: 'Maximum tenure is 360 months' }&#10;                })}&#10;                type=&quot;number&quot;&#10;                className=&quot;glass-input w-full&quot;&#10;                placeholder=&quot;240&quot;&#10;              /&gt;&#10;              {errors.tenure &amp;&amp; (&#10;                &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.tenure.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Start Date */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Start Date *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('startDate', { required: 'Start date is required' })}&#10;              type=&quot;date&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;            /&gt;&#10;            {errors.startDate &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.startDate.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* EMI Calculation */}&#10;          &lt;div className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 mb-3&quot;&gt;&#10;              &lt;Calculator className=&quot;w-5 h-5 text-blue-400&quot; /&gt;&#10;              &lt;span className=&quot;text-white/90 font-medium&quot;&gt;EMI Calculation&lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            {calculatedEmi &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;mb-4&quot;&gt;&#10;                &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Calculated EMI:&lt;/p&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-blue-400&quot;&gt;&#10;                  â‚¹{calculatedEmi.toLocaleString('en-IN', { maximumFractionDigits: 0 })}&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Show current EMI selection */}&#10;            &lt;div className=&quot;mb-4 p-3 bg-white/10 rounded-lg&quot;&gt;&#10;              &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Selected EMI:&lt;/p&gt;&#10;              &lt;p className=&quot;text-xl font-bold text-green-400&quot;&gt;&#10;                â‚¹{(useCustomEmi ? (Number(customEmi) || calculatedEmi) : calculatedEmi).toLocaleString('en-IN', { maximumFractionDigits: 0 })}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-2 mb-3&quot;&gt;&#10;              &lt;input&#10;                {...register('useCustomEmi')}&#10;                type=&quot;checkbox&quot;&#10;                className=&quot;rounded&quot;&#10;              /&gt;&#10;              &lt;label className=&quot;text-white/90 text-sm&quot;&gt;Use custom EMI amount&lt;/label&gt;&#10;            &lt;/div&gt;&#10;&#10;            {useCustomEmi &amp;&amp; (&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;                  Custom EMI Amount (â‚¹)&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  {...register('customEmi', {&#10;                    required: useCustomEmi ? 'Custom EMI is required' : false,&#10;                    min: { value: 100, message: 'Minimum EMI is â‚¹100' }&#10;                  })}&#10;                  type=&quot;number&quot;&#10;                  className=&quot;glass-input w-full&quot;&#10;                  placeholder={calculatedEmi.toString()}&#10;                /&gt;&#10;                {errors.customEmi &amp;&amp; (&#10;                  &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.customEmi.message}&lt;/p&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Form Actions */}&#10;          &lt;div className=&quot;flex space-x-4 pt-4&quot;&gt;&#10;            &lt;button&#10;              type=&quot;submit&quot;&#10;              className=&quot;glass-button flex-1 bg-blue-500/20 hover:bg-blue-500/30&quot;&#10;            &gt;&#10;              {loan ? 'Update Loan' : 'Add Loan'}&#10;            &lt;/button&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={onCancel}&#10;              className=&quot;glass-button flex-1 bg-gray-500/20 hover:bg-gray-500/30&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/motion.div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LoanForm;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { useForm } from 'react-hook-form';&#10;import { motion } from 'framer-motion';&#10;import { Loan } from '@/types';&#10;import { calculateEMI } from '@/utils/calculations';&#10;import { X, Calculator } from 'lucide-react';&#10;import { addMonths } from 'date-fns';&#10;&#10;interface LoanFormProps {&#10;  loan?: Loan;&#10;  onSubmit: (data: Omit&lt;Loan, 'id'&gt;) =&gt; void;&#10;  onCancel: () =&gt; void;&#10;  title: string;&#10;}&#10;&#10;interface FormData {&#10;  name: string;&#10;  principalAmount: number;&#10;  interestRate: number;&#10;  tenure: number;&#10;  startDate: string;&#10;  customEmi?: number;&#10;  useCustomEmi: boolean;&#10;}&#10;&#10;const LoanForm: React.FC&lt;LoanFormProps&gt; = ({ loan, onSubmit, onCancel, title }) =&gt; {&#10;  // Check if the existing loan has a custom EMI (different from calculated EMI)&#10;  const hasCustomEmi = loan ? (() =&gt; {&#10;    const calculatedEmi = calculateEMI(loan.principalAmount, Number(loan.interestRate), loan.tenure);&#10;    return Math.abs(Number(loan.emiAmount) - calculatedEmi) &gt; 1; // Allow small rounding differences&#10;  })() : false;&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    watch,&#10;    setValue,&#10;    formState: { errors }&#10;  } = useForm&lt;FormData&gt;({&#10;    defaultValues: {&#10;      name: loan?.name || '',&#10;      principalAmount: Number(loan?.principalAmount) || 0,&#10;      interestRate: Number(loan?.interestRate) || 0,&#10;      tenure: Number(loan?.tenure) || 0,&#10;      startDate: loan?.startDate ? loan.startDate.toISOString().split('T')[0] : '',&#10;      customEmi: loan?.useCustomEmi&#10;        ? (Number(loan?.customEmi ?? loan?.emiAmount) || 0)&#10;        : (Number(loan?.emiAmount) || 0),&#10;      useCustomEmi: loan?.useCustomEmi ?? hasCustomEmi&#10;    }&#10;  });&#10;&#10;  const watchedValues = watch(['principalAmount', 'interestRate', 'tenure', 'useCustomEmi', 'customEmi']);&#10;  const [principal, rate, tenure, useCustomEmi, customEmi] = watchedValues;&#10;&#10;  // Calculate EMI automatically&#10;  const calculatedEmi = principal &amp;&amp; rate &amp;&amp; tenure&#10;    ? calculateEMI(principal, rate, tenure)&#10;    : 0;&#10;&#10;  const handleFormSubmit = (data: FormData) =&gt; {&#10;    const startDate = new Date(data.startDate);&#10;&#10;    // Use custom EMI if selected, otherwise use calculated EMI&#10;    const emiAmount = data.useCustomEmi &amp;&amp; data.customEmi ? Number(data.customEmi) : calculatedEmi;&#10;&#10;    const loanData: Omit&lt;Loan, 'id'&gt; = {&#10;      name: data.name,&#10;      principalAmount: Number(data.principalAmount),&#10;      currentPrincipal: loan ? loan.currentPrincipal : Number(data.principalAmount),&#10;      interestRate: Number(data.interestRate),&#10;      emiAmount: Number(emiAmount),&#10;      // persist custom EMI settings&#10;      useCustomEmi: Boolean(data.useCustomEmi),&#10;      customEmi: data.useCustomEmi ? Number(data.customEmi) || Number(emiAmount) : undefined,&#10;      startDate,&#10;      tenure: Number(data.tenure),&#10;      nextEmiDate: addMonths(startDate, 1),&#10;      isActive: true,&#10;      partPayments: loan?.partPayments || [],&#10;      interestRateChanges: loan?.interestRateChanges || []&#10;    };&#10;&#10;    onSubmit(loanData);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, scale: 0.95 }}&#10;        animate={{ opacity: 1, scale: 1 }}&#10;        exit={{ opacity: 0, scale: 0.95 }}&#10;        className=&quot;glass-card w-full max-w-2xl max-h-[90vh] overflow-y-auto&quot;&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;{title}&lt;/h3&gt;&#10;          &lt;button&#10;            onClick={onCancel}&#10;            className=&quot;p-2 text-white/60 hover:text-white transition-colors&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit(handleFormSubmit)} className=&quot;space-y-6&quot;&gt;&#10;          {/* Loan Name */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Loan Name *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('name', { required: 'Loan name is required' })}&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;e.g., Home Loan, Car Loan&quot;&#10;            /&gt;&#10;            {errors.name &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.name.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Principal Amount */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Principal Amount (â‚¹) *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('principalAmount', {&#10;                required: 'Principal amount is required',&#10;                min: { value: 1000, message: 'Minimum amount is â‚¹1,000' }&#10;              })}&#10;              type=&quot;number&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;1000000&quot;&#10;            /&gt;&#10;            {errors.principalAmount &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.principalAmount.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;            {/* Interest Rate */}&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;                Interest Rate (% p.a.) *&#10;              &lt;/label&gt;&#10;              &lt;input&#10;                {...register('interestRate', {&#10;                  required: 'Interest rate is required',&#10;                  min: { value: 0.1, message: 'Minimum rate is 0.1%' },&#10;                  max: { value: 50, message: 'Maximum rate is 50%' }&#10;                })}&#10;                type=&quot;number&quot;&#10;                step=&quot;0.01&quot;&#10;                className=&quot;glass-input w-full&quot;&#10;                placeholder=&quot;8.5&quot;&#10;              /&gt;&#10;              {errors.interestRate &amp;&amp; (&#10;                &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.interestRate.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Tenure */}&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;                Tenure (Months) *&#10;              &lt;/label&gt;&#10;              &lt;input&#10;                {...register('tenure', {&#10;                  required: 'Tenure is required',&#10;                  min: { value: 1, message: 'Minimum tenure is 1 month' },&#10;                  max: { value: 360, message: 'Maximum tenure is 360 months' }&#10;                })}&#10;                type=&quot;number&quot;&#10;                className=&quot;glass-input w-full&quot;&#10;                placeholder=&quot;240&quot;&#10;              /&gt;&#10;              {errors.tenure &amp;&amp; (&#10;                &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.tenure.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Start Date */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Start Date *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('startDate', { required: 'Start date is required' })}&#10;              type=&quot;date&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;            /&gt;&#10;            {errors.startDate &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.startDate.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* EMI Calculation */}&#10;          &lt;div className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 mb-3&quot;&gt;&#10;              &lt;Calculator className=&quot;w-5 h-5 text-blue-400&quot; /&gt;&#10;              &lt;span className=&quot;text-white/90 font-medium&quot;&gt;EMI Calculation&lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            {calculatedEmi &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;mb-4&quot;&gt;&#10;                &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Calculated EMI:&lt;/p&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-blue-400&quot;&gt;&#10;                  â‚¹{calculatedEmi.toLocaleString('en-IN', { maximumFractionDigits: 0 })}&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Show current EMI selection */}&#10;            &lt;div className=&quot;mb-4 p-3 bg-white/10 rounded-lg&quot;&gt;&#10;              &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Selected EMI:&lt;/p&gt;&#10;              &lt;p className=&quot;text-xl font-bold text-green-400&quot;&gt;&#10;                â‚¹{(useCustomEmi ? (Number(customEmi) || calculatedEmi) : calculatedEmi).toLocaleString('en-IN', { maximumFractionDigits: 0 })}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-2 mb-3&quot;&gt;&#10;              &lt;input&#10;                {...register('useCustomEmi')}&#10;                type=&quot;checkbox&quot;&#10;                className=&quot;rounded&quot;&#10;              /&gt;&#10;              &lt;label className=&quot;text-white/90 text-sm&quot;&gt;Use custom EMI amount&lt;/label&gt;&#10;            &lt;/div&gt;&#10;&#10;            {useCustomEmi &amp;&amp; (&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;                  Custom EMI Amount (â‚¹)&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  {...register('customEmi', {&#10;                    required: useCustomEmi ? 'Custom EMI is required' : false,&#10;                    min: { value: 100, message: 'Minimum EMI is â‚¹100' }&#10;                  })}&#10;                  type=&quot;number&quot;&#10;                  className=&quot;glass-input w-full&quot;&#10;                  placeholder={calculatedEmi.toString()}&#10;                /&gt;&#10;                {errors.customEmi &amp;&amp; (&#10;                  &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.customEmi.message}&lt;/p&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Form Actions */}&#10;          &lt;div className=&quot;flex space-x-4 pt-4&quot;&gt;&#10;            &lt;button&#10;              type=&quot;submit&quot;&#10;              className=&quot;glass-button flex-1 bg-blue-500/20 hover:bg-blue-500/30&quot;&#10;            &gt;&#10;              {loan ? 'Update Loan' : 'Add Loan'}&#10;            &lt;/button&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={onCancel}&#10;              className=&quot;glass-button flex-1 bg-gray-500/20 hover:bg-gray-500/30&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/motion.div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LoanForm;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/LoanManagement/LoanManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/LoanManagement/LoanManagement.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { motion } from 'framer-motion';&#10;import { useLoans } from '@/hooks/useFinance';&#10;import { Loan, PartPayment } from '@/types';&#10;import LoanForm from './LoanForm';&#10;import LoanTable from '../Dashboard/LoanTable';&#10;import PartPaymentForm from './PartPaymentForm';&#10;import { Plus, Calculator, CreditCard } from 'lucide-react';&#10;import { v4 as uuidv4 } from 'uuid';&#10;&#10;const LoanManagement: React.FC = () =&gt; {&#10;  const { loans, addLoan, updateLoan, deleteLoan, addPartPayment } = useLoans();&#10;  const [showAddForm, setShowAddForm] = useState(false);&#10;  const [editingLoan, setEditingLoan] = useState&lt;Loan | null&gt;(null);&#10;  const [showPartPaymentForm, setShowPartPaymentForm] = useState&lt;string | null&gt;(null);&#10;&#10;  const handleAddLoan = (loanData: Omit&lt;Loan, 'id'&gt;) =&gt; {&#10;    const newLoan: Loan = {&#10;      ...loanData,&#10;      id: uuidv4(),&#10;    };&#10;    addLoan(newLoan);&#10;    setShowAddForm(false);&#10;  };&#10;&#10;  const handleEditLoan = (loanData: Omit&lt;Loan, 'id'&gt;) =&gt; {&#10;    if (editingLoan) {&#10;      // Preserve existing loan properties that shouldn't be reset&#10;      const updatedLoanData = {&#10;        ...loanData,&#10;        currentPrincipal: editingLoan.currentPrincipal, // Keep current principal (affected by part payments)&#10;        partPayments: editingLoan.partPayments, // Keep existing part payments&#10;        interestRateChanges: editingLoan.interestRateChanges, // Keep rate change history&#10;        lastEmiDate: editingLoan.lastEmiDate, // Keep last EMI date if it exists&#10;      };&#10;&#10;      updateLoan(editingLoan.id, updatedLoanData);&#10;      setEditingLoan(null);&#10;    }&#10;  };&#10;&#10;  const handleDeleteLoan = (loanId: string) =&gt; {&#10;    if (confirm('Are you sure you want to delete this loan?')) {&#10;      deleteLoan(loanId);&#10;    }&#10;  };&#10;&#10;  const handlePartPayment = (loanId: string, partPaymentData: Omit&lt;PartPayment, 'id'&gt;) =&gt; {&#10;    const partPayment: PartPayment = {&#10;      ...partPaymentData,&#10;      id: uuidv4(),&#10;    };&#10;    addPartPayment(loanId, partPayment);&#10;    setShowPartPaymentForm(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-8&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-white&quot;&gt;Loan Management&lt;/h2&gt;&#10;          &lt;p className=&quot;text-white/70&quot;&gt;Add, edit, and manage your loans&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;motion.button&#10;          onClick={() =&gt; setShowAddForm(true)}&#10;          className=&quot;glass-button flex items-center space-x-2&quot;&#10;          whileHover={{ scale: 1.02 }}&#10;          whileTap={{ scale: 0.98 }}&#10;        &gt;&#10;          &lt;Plus className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;span&gt;Add New Loan&lt;/span&gt;&#10;        &lt;/motion.button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Quick Stats */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6&quot;&gt;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;CreditCard className=&quot;w-8 h-8 text-blue-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Total Loans&lt;/p&gt;&#10;          &lt;p className=&quot;text-2xl font-bold text-white&quot;&gt;{loans.length}&lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.1 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;Calculator className=&quot;w-8 h-8 text-green-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Active Loans&lt;/p&gt;&#10;          &lt;p className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;            {loans.filter(loan =&gt; loan.isActive).length}&#10;          &lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.2 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;Plus className=&quot;w-8 h-8 text-purple-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Part Payments&lt;/p&gt;&#10;          &lt;p className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;            {loans.reduce((total, loan) =&gt; total + loan.partPayments.length, 0)}&#10;          &lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Loan Table */}&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 20 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ delay: 0.3 }}&#10;      &gt;&#10;        &lt;LoanTable&#10;          loans={loans}&#10;          onEdit={setEditingLoan}&#10;          onDelete={handleDeleteLoan}&#10;          onPartPayment={(loan) =&gt; setShowPartPaymentForm(loan.id)}&#10;          showActions={true}&#10;        /&gt;&#10;      &lt;/motion.div&gt;&#10;&#10;      {/* Part Payment Actions */}&#10;      {loans.filter(loan =&gt; loan.isActive).length &gt; 0 &amp;&amp; (&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.4 }}&#10;          className=&quot;glass-card&quot;&#10;        &gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-white mb-4&quot;&gt;Quick Actions&lt;/h3&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#10;            {loans.filter(loan =&gt; loan.isActive).map(loan =&gt; (&#10;              &lt;button&#10;                key={loan.id}&#10;                onClick={() =&gt; setShowPartPaymentForm(loan.id)}&#10;                className=&quot;p-4 bg-white/5 rounded-lg hover:bg-white/10 transition-colors text-left&quot;&#10;              &gt;&#10;                &lt;h4 className=&quot;font-medium text-white&quot;&gt;{loan.name}&lt;/h4&gt;&#10;                &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Make part payment&lt;/p&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;      )}&#10;&#10;      {/* Add Loan Modal */}&#10;      {showAddForm &amp;&amp; (&#10;        &lt;LoanForm&#10;          onSubmit={handleAddLoan}&#10;          onCancel={() =&gt; setShowAddForm(false)}&#10;          title=&quot;Add New Loan&quot;&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Edit Loan Modal */}&#10;      {editingLoan &amp;&amp; (&#10;        &lt;LoanForm&#10;          loan={editingLoan}&#10;          onSubmit={handleEditLoan}&#10;          onCancel={() =&gt; setEditingLoan(null)}&#10;          title=&quot;Edit Loan&quot;&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Part Payment Modal */}&#10;      {showPartPaymentForm &amp;&amp; (&#10;        &lt;PartPaymentForm&#10;          loanId={showPartPaymentForm}&#10;          loan={loans.find(l =&gt; l.id === showPartPaymentForm)!}&#10;          onSubmit={(data) =&gt; handlePartPayment(showPartPaymentForm, data)}&#10;          onCancel={() =&gt; setShowPartPaymentForm(null)}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LoanManagement;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { motion } from 'framer-motion';&#10;import { useLoans } from '@/hooks/useFinance';&#10;import { Loan, PartPayment } from '@/types';&#10;import LoanForm from './LoanForm';&#10;import LoanTable from '../Dashboard/LoanTable';&#10;import PartPaymentForm from './PartPaymentForm';&#10;import { Plus, Calculator, CreditCard } from 'lucide-react';&#10;import { v4 as uuidv4 } from 'uuid';&#10;&#10;const LoanManagement: React.FC = () =&gt; {&#10;  const { loans, addLoan, updateLoan, deleteLoan, addPartPayment, removeLastPartPayment } = useLoans();&#10;  const [showAddForm, setShowAddForm] = useState(false);&#10;  const [editingLoan, setEditingLoan] = useState&lt;Loan | null&gt;(null);&#10;  const [showPartPaymentForm, setShowPartPaymentForm] = useState&lt;string | null&gt;(null);&#10;&#10;  const handleAddLoan = (loanData: Omit&lt;Loan, 'id'&gt;) =&gt; {&#10;    const newLoan: Loan = {&#10;      ...loanData,&#10;      id: uuidv4(),&#10;    };&#10;    addLoan(newLoan);&#10;    setShowAddForm(false);&#10;  };&#10;&#10;  const handleEditLoan = (loanData: Omit&lt;Loan, 'id'&gt;) =&gt; {&#10;    if (editingLoan) {&#10;      // Preserve existing loan properties that shouldn't be reset&#10;      const updatedLoanData = {&#10;        ...loanData,&#10;        currentPrincipal: editingLoan.currentPrincipal, // Keep current principal (affected by part payments)&#10;        partPayments: editingLoan.partPayments, // Keep existing part payments&#10;        interestRateChanges: editingLoan.interestRateChanges, // Keep rate change history&#10;        lastEmiDate: editingLoan.lastEmiDate, // Keep last EMI date if it exists&#10;      };&#10;&#10;      updateLoan(editingLoan.id, updatedLoanData);&#10;      setEditingLoan(null);&#10;    }&#10;  };&#10;&#10;  const handleDeleteLoan = (loanId: string) =&gt; {&#10;    if (confirm('Are you sure you want to delete this loan?')) {&#10;      deleteLoan(loanId);&#10;    }&#10;  };&#10;&#10;  const handlePartPayment = (loanId: string, partPaymentData: Omit&lt;PartPayment, 'id'&gt;) =&gt; {&#10;    const partPayment: PartPayment = {&#10;      ...partPaymentData,&#10;      id: uuidv4(),&#10;    };&#10;    addPartPayment(loanId, partPayment);&#10;    setShowPartPaymentForm(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-8&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-white&quot;&gt;Loan Management&lt;/h2&gt;&#10;          &lt;p className=&quot;text-white/70&quot;&gt;Add, edit, and manage your loans&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;motion.button&#10;          onClick={() =&gt; setShowAddForm(true)}&#10;          className=&quot;glass-button flex items-center space-x-2&quot;&#10;          whileHover={{ scale: 1.02 }}&#10;          whileTap={{ scale: 0.98 }}&#10;        &gt;&#10;          &lt;Plus className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;span&gt;Add New Loan&lt;/span&gt;&#10;        &lt;/motion.button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Quick Stats */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6&quot;&gt;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;CreditCard className=&quot;w-8 h-8 text-blue-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Total Loans&lt;/p&gt;&#10;          &lt;p className=&quot;text-2xl font-bold text-white&quot;&gt;{loans.length}&lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.1 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;Calculator className=&quot;w-8 h-8 text-green-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Active Loans&lt;/p&gt;&#10;          &lt;p className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;            {loans.filter(loan =&gt; loan.isActive).length}&#10;          &lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.2 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;Plus className=&quot;w-8 h-8 text-purple-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Part Payments&lt;/p&gt;&#10;          &lt;p className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;            {loans.reduce((total, loan) =&gt; total + loan.partPayments.length, 0)}&#10;          &lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Loan Table */}&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 20 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ delay: 0.3 }}&#10;      &gt;&#10;        &lt;LoanTable&#10;          loans={loans}&#10;          onEdit={setEditingLoan}&#10;          onDelete={handleDeleteLoan}&#10;          onPartPayment={(loan) =&gt; setShowPartPaymentForm(loan.id)}&#10;          onUndoLastPartPayment={(loan) =&gt; {&#10;            if (confirm('Undo the last part payment for this loan?')) {&#10;              removeLastPartPayment(loan.id);&#10;            }&#10;          }}&#10;          showActions={true}&#10;        /&gt;&#10;      &lt;/motion.div&gt;&#10;&#10;      {/* Part Payment Actions */}&#10;      {loans.filter(loan =&gt; loan.isActive).length &gt; 0 &amp;&amp; (&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.4 }}&#10;          className=&quot;glass-card&quot;&#10;        &gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-white mb-4&quot;&gt;Quick Actions&lt;/h3&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#10;            {loans.filter(loan =&gt; loan.isActive).map(loan =&gt; (&#10;              &lt;button&#10;                key={loan.id}&#10;                onClick={() =&gt; setShowPartPaymentForm(loan.id)}&#10;                className=&quot;p-4 bg-white/5 rounded-lg hover:bg-white/10 transition-colors text-left&quot;&#10;              &gt;&#10;                &lt;h4 className=&quot;font-medium text-white&quot;&gt;{loan.name}&lt;/h4&gt;&#10;                &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Make part payment&lt;/p&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;      )}&#10;&#10;      {/* Add Loan Modal */}&#10;      {showAddForm &amp;&amp; (&#10;        &lt;LoanForm&#10;          onSubmit={handleAddLoan}&#10;          onCancel={() =&gt; setShowAddForm(false)}&#10;          title=&quot;Add New Loan&quot;&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Edit Loan Modal */}&#10;      {editingLoan &amp;&amp; (&#10;        &lt;LoanForm&#10;          loan={editingLoan}&#10;          onSubmit={handleEditLoan}&#10;          onCancel={() =&gt; setEditingLoan(null)}&#10;          title=&quot;Edit Loan&quot;&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Part Payment Modal */}&#10;      {showPartPaymentForm &amp;&amp; (&#10;        &lt;PartPaymentForm&#10;          loanId={showPartPaymentForm}&#10;          loan={loans.find(l =&gt; l.id === showPartPaymentForm)!}&#10;          onSubmit={(data) =&gt; handlePartPayment(showPartPaymentForm, data)}&#10;          onCancel={() =&gt; setShowPartPaymentForm(null)}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LoanManagement;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/LoanManagement/PartPaymentForm.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/LoanManagement/PartPaymentForm.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { useForm } from 'react-hook-form';&#10;import { motion } from 'framer-motion';&#10;import { Loan, PartPayment } from '@/types';&#10;import { calculateLoanDetails, calculatePartPaymentSavings, formatCurrency } from '@/utils/calculations';&#10;import { X, TrendingDown, Calculator } from 'lucide-react';&#10;&#10;interface PartPaymentFormProps {&#10;  loanId: string;&#10;  loan: Loan;&#10;  onSubmit: (data: Omit&lt;PartPayment, 'id'&gt;) =&gt; void;&#10;  onCancel: () =&gt; void;&#10;}&#10;&#10;interface FormData {&#10;  amount: number;&#10;  date: string;&#10;  description: string;&#10;}&#10;&#10;const PartPaymentForm: React.FC&lt;PartPaymentFormProps&gt; = ({&#10;  loan,&#10;  onSubmit,&#10;  onCancel&#10;}) =&gt; {&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    watch,&#10;    formState: { errors }&#10;  } = useForm&lt;FormData&gt;({&#10;    defaultValues: {&#10;      amount: 0,&#10;      date: new Date().toISOString().split('T')[0],&#10;      description: ''&#10;    }&#10;  });&#10;&#10;  const watchedAmount = watch('amount');&#10;  const loanDetails = calculateLoanDetails(loan);&#10;  const potentialSavings = watchedAmount &gt; 0&#10;    ? calculatePartPaymentSavings(loan, watchedAmount)&#10;    : 0;&#10;&#10;  const handleFormSubmit = (data: FormData) =&gt; {&#10;    const partPayment: Omit&lt;PartPayment, 'id'&gt; = {&#10;      amount: data.amount,&#10;      date: new Date(data.date),&#10;      description: data.description || `Part payment of ${formatCurrency(data.amount)}`&#10;    };&#10;&#10;    onSubmit(partPayment);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, scale: 0.95 }}&#10;        animate={{ opacity: 1, scale: 1 }}&#10;        exit={{ opacity: 0, scale: 0.95 }}&#10;        className=&quot;glass-card w-full max-w-2xl&quot;&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;Make Part Payment&lt;/h3&gt;&#10;            &lt;p className=&quot;text-white/70 text-sm&quot;&gt;{loan.name}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;button&#10;            onClick={onCancel}&#10;            className=&quot;p-2 text-white/60 hover:text-white transition-colors&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Loan Summary */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4 mb-6&quot;&gt;&#10;          &lt;div className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;            &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Outstanding Principal&lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold text-red-400&quot;&gt;&#10;              {formatCurrency(loanDetails.remainingPrincipal)}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;            &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Current EMI&lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold text-blue-400&quot;&gt;&#10;              {formatCurrency(loanDetails.emiAmount)}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;            &lt;p className=&quot;text-white/70 text-sm&quot;&gt;EMIs Remaining&lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold text-orange-400&quot;&gt;&#10;              {loanDetails.remainingEmis}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit(handleFormSubmit)} className=&quot;space-y-6&quot;&gt;&#10;          {/* Part Payment Amount */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Part Payment Amount (â‚¹) *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('amount', {&#10;                required: 'Part payment amount is required',&#10;                min: { value: 1000, message: 'Minimum part payment is â‚¹1,000' },&#10;                max: {&#10;                  value: loanDetails.remainingPrincipal,&#10;                  message: `Cannot exceed outstanding principal of ${formatCurrency(loanDetails.remainingPrincipal)}`&#10;                }&#10;              })}&#10;              type=&quot;number&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;50000&quot;&#10;            /&gt;&#10;            {errors.amount &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.amount.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Payment Date */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Payment Date *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('date', { required: 'Payment date is required' })}&#10;              type=&quot;date&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;            /&gt;&#10;            {errors.date &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.date.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Description */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Description (Optional)&#10;            &lt;/label&gt;&#10;            &lt;textarea&#10;              {...register('description')}&#10;              className=&quot;glass-input w-full h-20 resize-none&quot;&#10;              placeholder=&quot;Reason for part payment...&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Impact Analysis */}&#10;          {watchedAmount &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;bg-green-500/10 border border-green-500/20 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 mb-3&quot;&gt;&#10;                &lt;Calculator className=&quot;w-5 h-5 text-green-400&quot; /&gt;&#10;                &lt;span className=&quot;text-green-400 font-medium&quot;&gt;Impact Analysis&lt;/span&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Potential Interest Savings&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xl font-bold text-green-400&quot;&gt;&#10;                    {formatCurrency(potentialSavings)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-white/70 text-sm&quot;&gt;New Outstanding Balance&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xl font-bold text-blue-400&quot;&gt;&#10;                    {formatCurrency(loanDetails.remainingPrincipal - watchedAmount)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-3 p-3 bg-white/5 rounded-lg&quot;&gt;&#10;                &lt;p className=&quot;text-white/80 text-sm&quot;&gt;&#10;                   This part payment could save you &lt;strong&gt;{formatCurrency(potentialSavings)}&lt;/strong&gt; in&#10;                  interest over the loan tenure and help you become debt-free faster!&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Form Actions */}&#10;          &lt;div className=&quot;flex space-x-4 pt-4&quot;&gt;&#10;            &lt;button&#10;              type=&quot;submit&quot;&#10;              className=&quot;glass-button flex-1 bg-green-500/20 hover:bg-green-500/30&quot;&#10;              disabled={!watchedAmount || watchedAmount &lt; 1000}&#10;            &gt;&#10;              &lt;TrendingDown className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;              Make Part Payment&#10;            &lt;/button&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={onCancel}&#10;              className=&quot;glass-button flex-1 bg-gray-500/20 hover:bg-gray-500/30&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/motion.div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default PartPaymentForm;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { useForm } from 'react-hook-form';&#10;import { motion } from 'framer-motion';&#10;import { Loan, PartPayment } from '@/types';&#10;import { calculateLoanDetails, calculatePartPaymentSavings, formatCurrency } from '@/utils/calculations';&#10;import { X, TrendingDown, Calculator } from 'lucide-react';&#10;&#10;interface PartPaymentFormProps {&#10;  loanId: string;&#10;  loan: Loan;&#10;  onSubmit: (data: Omit&lt;PartPayment, 'id'&gt;) =&gt; void;&#10;  onCancel: () =&gt; void;&#10;}&#10;&#10;interface FormData {&#10;  amount: number;&#10;  date: string;&#10;  description: string;&#10;}&#10;&#10;const PartPaymentForm: React.FC&lt;PartPaymentFormProps&gt; = ({&#10;  loan,&#10;  onSubmit,&#10;  onCancel&#10;}) =&gt; {&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    watch,&#10;    formState: { errors }&#10;  } = useForm&lt;FormData&gt;({&#10;    defaultValues: {&#10;      amount: 0,&#10;      date: new Date().toISOString().split('T')[0],&#10;      description: ''&#10;    }&#10;  });&#10;&#10;  const watchedAmount = watch('amount');&#10;  const loanDetails = calculateLoanDetails(loan);&#10;  const potentialSavings = watchedAmount &gt; 0&#10;    ? calculatePartPaymentSavings(loan, watchedAmount)&#10;    : 0;&#10;&#10;  const handleFormSubmit = (data: FormData) =&gt; {&#10;    const partPayment: Omit&lt;PartPayment, 'id'&gt; = {&#10;      amount: Number(data.amount),&#10;      date: new Date(data.date),&#10;      description: data.description || `Part payment of ${formatCurrency(Number(data.amount))}`&#10;    };&#10;&#10;    onSubmit(partPayment);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, scale: 0.95 }}&#10;        animate={{ opacity: 1, scale: 1 }}&#10;        exit={{ opacity: 0, scale: 0.95 }}&#10;        className=&quot;glass-card w-full max-w-2xl&quot;&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;Make Part Payment&lt;/h3&gt;&#10;            &lt;p className=&quot;text-white/70 text-sm&quot;&gt;{loan.name}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;button&#10;            onClick={onCancel}&#10;            className=&quot;p-2 text-white/60 hover:text-white transition-colors&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Loan Summary */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4 mb-6&quot;&gt;&#10;          &lt;div className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;            &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Outstanding Principal&lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold text-red-400&quot;&gt;&#10;              {formatCurrency(loanDetails.remainingPrincipal)}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;            &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Current EMI&lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold text-blue-400&quot;&gt;&#10;              {formatCurrency(loanDetails.emiAmount)}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;            &lt;p className=&quot;text-white/70 text-sm&quot;&gt;EMIs Remaining&lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold text-orange-400&quot;&gt;&#10;              {loanDetails.remainingEmis}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit(handleFormSubmit)} className=&quot;space-y-6&quot;&gt;&#10;          {/* Part Payment Amount */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Part Payment Amount (â‚¹) *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('amount', {&#10;                required: 'Part payment amount is required',&#10;                min: { value: 1000, message: 'Minimum part payment is â‚¹1,000' },&#10;                max: {&#10;                  value: loanDetails.remainingPrincipal,&#10;                  message: `Cannot exceed outstanding principal of ${formatCurrency(loanDetails.remainingPrincipal)}`&#10;                }&#10;              })}&#10;              type=&quot;number&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;50000&quot;&#10;            /&gt;&#10;            {errors.amount &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.amount.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Payment Date */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Payment Date *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('date', { required: 'Payment date is required' })}&#10;              type=&quot;date&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;            /&gt;&#10;            {errors.date &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.date.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Description */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Description (Optional)&#10;            &lt;/label&gt;&#10;            &lt;textarea&#10;              {...register('description')}&#10;              className=&quot;glass-input w-full h-20 resize-none&quot;&#10;              placeholder=&quot;Reason for part payment...&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Impact Analysis */}&#10;          {watchedAmount &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;bg-green-500/10 border border-green-500/20 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 mb-3&quot;&gt;&#10;                &lt;Calculator className=&quot;w-5 h-5 text-green-400&quot; /&gt;&#10;                &lt;span className=&quot;text-green-400 font-medium&quot;&gt;Impact Analysis&lt;/span&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Potential Interest Savings&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xl font-bold text-green-400&quot;&gt;&#10;                    {formatCurrency(potentialSavings)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-white/70 text-sm&quot;&gt;New Outstanding Balance&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xl font-bold text-blue-400&quot;&gt;&#10;                    {formatCurrency(loanDetails.remainingPrincipal - watchedAmount)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-3 p-3 bg-white/5 rounded-lg&quot;&gt;&#10;                &lt;p className=&quot;text-white/80 text-sm&quot;&gt;&#10;                   This part payment could save you &lt;strong&gt;{formatCurrency(potentialSavings)}&lt;/strong&gt; in&#10;                  interest over the loan tenure and help you become debt-free faster!&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Form Actions */}&#10;          &lt;div className=&quot;flex space-x-4 pt-4&quot;&gt;&#10;            &lt;button&#10;              type=&quot;submit&quot;&#10;              className=&quot;glass-button flex-1 bg-green-500/20 hover:bg-green-500/30&quot;&#10;              disabled={!watchedAmount || watchedAmount &lt; 1000}&#10;            &gt;&#10;              &lt;TrendingDown className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;              Make Part Payment&#10;            &lt;/button&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={onCancel}&#10;              className=&quot;glass-button flex-1 bg-gray-500/20 hover:bg-gray-500/30&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/motion.div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default PartPaymentForm;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Navigation.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Navigation.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { motion } from 'framer-motion';&#10;&#10;interface Tab {&#10;  id: string;&#10;  label: string;&#10;  component: React.ComponentType;&#10;}&#10;&#10;interface NavigationProps {&#10;  tabs: Tab[];&#10;  activeTab: string;&#10;  onTabChange: (tabId: string) =&gt; void;&#10;}&#10;&#10;const Navigation: React.FC&lt;NavigationProps&gt; = ({ tabs, activeTab, onTabChange }) =&gt; {&#10;  return (&#10;    &lt;nav className=&quot;glass border-b border-white/10&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex space-x-8 overflow-x-auto&quot;&gt;&#10;          {tabs.map((tab) =&gt; (&#10;            &lt;motion.button&#10;              key={tab.id}&#10;              onClick={() =&gt; onTabChange(tab.id)}&#10;              className={`nav-tab whitespace-nowrap ${&#10;                activeTab === tab.id ? 'active' : ''&#10;              }`}&#10;              whileHover={{ scale: 1.05 }}&#10;              whileTap={{ scale: 0.95 }}&#10;            &gt;&#10;              {tab.label}&#10;            &lt;/motion.button&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;};&#10;&#10;export default Navigation;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Savings/Savings.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Savings/Savings.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { motion } from 'framer-motion';&#10;import { useSavings } from '@/hooks/useFinance';&#10;import { SavingsAccount, SavingsCategory } from '@/types';&#10;import SavingsForm from './SavingsForm';&#10;import SavingsCard from './SavingsCard';&#10;import { Plus, PiggyBank, TrendingUp, Target } from 'lucide-react';&#10;import { formatCurrency } from '@/utils/calculations';&#10;import { v4 as uuidv4 } from 'uuid';&#10;&#10;const Savings: React.FC = () =&gt; {&#10;  const { savings, totalSavings, addSavingsAccount, updateSavingsAccount, deleteSavingsAccount } = useSavings();&#10;  const [showAddForm, setShowAddForm] = useState(false);&#10;  const [editingAccount, setEditingAccount] = useState&lt;SavingsAccount | null&gt;(null);&#10;&#10;  const handleAddSavings = (accountData: Omit&lt;SavingsAccount, 'id' | 'dateAdded' | 'lastUpdated'&gt;) =&gt; {&#10;    const newAccount: SavingsAccount = {&#10;      ...accountData,&#10;      id: uuidv4(),&#10;      dateAdded: new Date(),&#10;      lastUpdated: new Date(),&#10;    };&#10;    addSavingsAccount(newAccount);&#10;    setShowAddForm(false);&#10;  };&#10;&#10;  const handleEditSavings = (accountData: Omit&lt;SavingsAccount, 'id' | 'dateAdded' | 'lastUpdated'&gt;) =&gt; {&#10;    if (editingAccount) {&#10;      updateSavingsAccount(editingAccount.id, {&#10;        ...accountData,&#10;        lastUpdated: new Date(),&#10;      });&#10;      setEditingAccount(null);&#10;    }&#10;  };&#10;&#10;  const handleDeleteSavings = (accountId: string) =&gt; {&#10;    if (confirm('Are you sure you want to delete this savings account?')) {&#10;      deleteSavingsAccount(accountId);&#10;    }&#10;  };&#10;&#10;  // Group savings by category&#10;  const savingsByCategory = savings.reduce((acc, account) =&gt; {&#10;    if (!acc[account.category]) {&#10;      acc[account.category] = [];&#10;    }&#10;    acc[account.category].push(account);&#10;    return acc;&#10;  }, {} as Record&lt;SavingsCategory, SavingsAccount[]&gt;);&#10;&#10;  const categoryTotals = Object.entries(savingsByCategory).map(([category, accounts]) =&gt; ({&#10;    category: category as SavingsCategory,&#10;    total: accounts.reduce((sum, account) =&gt; sum + account.amount, 0),&#10;    count: accounts.length&#10;  }));&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-8&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-white&quot;&gt;Savings Management&lt;/h2&gt;&#10;          &lt;p className=&quot;text-white/70&quot;&gt;Track and manage your savings across different categories&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;motion.button&#10;          onClick={() =&gt; setShowAddForm(true)}&#10;          className=&quot;glass-button flex items-center space-x-2&quot;&#10;          whileHover={{ scale: 1.02 }}&#10;          whileTap={{ scale: 0.98 }}&#10;        &gt;&#10;          &lt;Plus className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;span&gt;Add Savings Account&lt;/span&gt;&#10;        &lt;/motion.button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Summary Cards */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6&quot;&gt;&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;PiggyBank className=&quot;w-8 h-8 text-green-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Total Savings&lt;/p&gt;&#10;          &lt;p className=&quot;text-3xl font-bold text-green-400&quot;&gt;{formatCurrency(totalSavings)}&lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;        &#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.1 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;Target className=&quot;w-8 h-8 text-blue-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Savings Accounts&lt;/p&gt;&#10;          &lt;p className=&quot;text-3xl font-bold text-blue-400&quot;&gt;{savings.length}&lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;        &#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.2 }}&#10;          className=&quot;glass-card text-center&quot;&#10;        &gt;&#10;          &lt;TrendingUp className=&quot;w-8 h-8 text-purple-400 mx-auto mb-2&quot; /&gt;&#10;          &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Categories&lt;/p&gt;&#10;          &lt;p className=&quot;text-3xl font-bold text-purple-400&quot;&gt;{categoryTotals.length}&lt;/p&gt;&#10;        &lt;/motion.div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Category Overview */}&#10;      {categoryTotals.length &gt; 0 &amp;&amp; (&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.3 }}&#10;          className=&quot;glass-card&quot;&#10;        &gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white mb-6&quot;&gt;Savings by Category&lt;/h3&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#10;            {categoryTotals.map(({ category, total, count }) =&gt; (&#10;              &lt;div key={category} className=&quot;bg-white/5 rounded-lg p-4&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-start mb-2&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-white&quot;&gt;{category}&lt;/h4&gt;&#10;                  &lt;span className=&quot;text-white/60 text-xs&quot;&gt;{count} account{count !== 1 ? 's' : ''}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-lg font-bold text-green-400&quot;&gt;{formatCurrency(total)}&lt;/p&gt;&#10;                &lt;div className=&quot;w-full bg-white/10 rounded-full h-2 mt-2&quot;&gt;&#10;                  &lt;div &#10;                    className=&quot;bg-green-400 h-2 rounded-full transition-all duration-300&quot;&#10;                    style={{ width: `${(total / totalSavings) * 100}%` }}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-white/60 text-xs mt-1&quot;&gt;&#10;                  {((total / totalSavings) * 100).toFixed(1)}% of total savings&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;      )}&#10;&#10;      {/* Savings Accounts */}&#10;      {savings.length &gt; 0 ? (&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.4 }}&#10;          className=&quot;space-y-6&quot;&#10;        &gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;Your Savings Accounts&lt;/h3&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;            {savings.map((account, index) =&gt; (&#10;              &lt;motion.div&#10;                key={account.id}&#10;                initial={{ opacity: 0, y: 20 }}&#10;                animate={{ opacity: 1, y: 0 }}&#10;                transition={{ delay: 0.1 * index }}&#10;              &gt;&#10;                &lt;SavingsCard&#10;                  account={account}&#10;                  onEdit={() =&gt; setEditingAccount(account)}&#10;                  onDelete={() =&gt; handleDeleteSavings(account.id)}&#10;                /&gt;&#10;              &lt;/motion.div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;      ) : (&#10;        &lt;motion.div&#10;          initial={{ opacity: 0, y: 20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ delay: 0.4 }}&#10;          className=&quot;glass-card text-center py-12&quot;&#10;        &gt;&#10;          &lt;PiggyBank className=&quot;w-16 h-16 text-white/30 mx-auto mb-4&quot; /&gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white/70 mb-2&quot;&gt;No Savings Accounts&lt;/h3&gt;&#10;          &lt;p className=&quot;text-white/50 mb-6&quot;&gt;Start tracking your savings by adding your first account&lt;/p&gt;&#10;          &lt;button&#10;            onClick={() =&gt; setShowAddForm(true)}&#10;            className=&quot;glass-button&quot;&#10;          &gt;&#10;            Add Your First Savings Account&#10;          &lt;/button&gt;&#10;        &lt;/motion.div&gt;&#10;      )}&#10;&#10;      {/* Add Savings Modal */}&#10;      {showAddForm &amp;&amp; (&#10;        &lt;SavingsForm&#10;          onSubmit={handleAddSavings}&#10;          onCancel={() =&gt; setShowAddForm(false)}&#10;          title=&quot;Add Savings Account&quot;&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Edit Savings Modal */}&#10;      {editingAccount &amp;&amp; (&#10;        &lt;SavingsForm&#10;          account={editingAccount}&#10;          onSubmit={handleEditSavings}&#10;          onCancel={() =&gt; setEditingAccount(null)}&#10;          title=&quot;Edit Savings Account&quot;&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Savings;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Savings/SavingsForm.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Savings/SavingsForm.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { useForm } from 'react-hook-form';&#10;import { motion } from 'framer-motion';&#10;import { SavingsAccount, SavingsCategory } from '@/types';&#10;import { X } from 'lucide-react';&#10;&#10;interface SavingsFormProps {&#10;  account?: SavingsAccount;&#10;  onSubmit: (data: Omit&lt;SavingsAccount, 'id' | 'dateAdded' | 'lastUpdated'&gt;) =&gt; void;&#10;  onCancel: () =&gt; void;&#10;  title: string;&#10;}&#10;&#10;interface FormData {&#10;  name: string;&#10;  category: SavingsCategory;&#10;  amount: number;&#10;  description: string;&#10;}&#10;&#10;const savingsCategories: SavingsCategory[] = [&#10;  'Emergency Fund',&#10;  'Fixed Deposit',&#10;  'Mutual Funds',&#10;  'Savings Account',&#10;  'PPF',&#10;  'Other'&#10;];&#10;&#10;const SavingsForm: React.FC&lt;SavingsFormProps&gt; = ({ account, onSubmit, onCancel, title }) =&gt; {&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    formState: { errors }&#10;  } = useForm&lt;FormData&gt;({&#10;    defaultValues: {&#10;      name: account?.name || '',&#10;      category: account?.category || 'Savings Account',&#10;      amount: account?.amount || 0,&#10;      description: account?.description || ''&#10;    }&#10;  });&#10;&#10;  const handleFormSubmit = (data: FormData) =&gt; {&#10;    onSubmit(data);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, scale: 0.95 }}&#10;        animate={{ opacity: 1, scale: 1 }}&#10;        exit={{ opacity: 0, scale: 0.95 }}&#10;        className=&quot;glass-card w-full max-w-lg&quot;&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;{title}&lt;/h3&gt;&#10;          &lt;button&#10;            onClick={onCancel}&#10;            className=&quot;p-2 text-white/60 hover:text-white transition-colors&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit(handleFormSubmit)} className=&quot;space-y-6&quot;&gt;&#10;          {/* Account Name */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Account Name *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('name', { required: 'Account name is required' })}&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;e.g., Emergency Fund, SBI FD&quot;&#10;            /&gt;&#10;            {errors.name &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.name.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Category */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Category *&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              {...register('category', { required: 'Category is required' })}&#10;              className=&quot;glass-input w-full&quot;&#10;            &gt;&#10;              {savingsCategories.map(category =&gt; (&#10;                &lt;option key={category} value={category} className=&quot;bg-slate-800&quot;&gt;&#10;                  {category}&#10;                &lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;            {errors.category &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.category.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Amount */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Amount (â‚¹) *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('amount', {&#10;                required: 'Amount is required',&#10;                min: { value: 0, message: 'Amount must be positive' }&#10;              })}&#10;              type=&quot;number&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;50000&quot;&#10;            /&gt;&#10;            {errors.amount &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.amount.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Description */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Description (Optional)&#10;            &lt;/label&gt;&#10;            &lt;textarea&#10;              {...register('description')}&#10;              className=&quot;glass-input w-full h-20 resize-none&quot;&#10;              placeholder=&quot;Additional details about this savings account...&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Form Actions */}&#10;          &lt;div className=&quot;flex space-x-4 pt-4&quot;&gt;&#10;            &lt;button&#10;              type=&quot;submit&quot;&#10;              className=&quot;glass-button flex-1 bg-green-500/20 hover:bg-green-500/30&quot;&#10;            &gt;&#10;              {account ? 'Update Account' : 'Add Account'}&#10;            &lt;/button&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={onCancel}&#10;              className=&quot;glass-button flex-1 bg-gray-500/20 hover:bg-gray-500/30&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/motion.div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default SavingsForm;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { useForm } from 'react-hook-form';&#10;import { motion } from 'framer-motion';&#10;import { SavingsAccount, SavingsCategory } from '@/types';&#10;import { X } from 'lucide-react';&#10;&#10;interface SavingsFormProps {&#10;  account?: SavingsAccount;&#10;  onSubmit: (data: Omit&lt;SavingsAccount, 'id' | 'dateAdded' | 'lastUpdated'&gt;) =&gt; void;&#10;  onCancel: () =&gt; void;&#10;  title: string;&#10;}&#10;&#10;interface FormData {&#10;  name: string;&#10;  category: SavingsCategory;&#10;  amount: number;&#10;  description: string;&#10;}&#10;&#10;const savingsCategories: SavingsCategory[] = [&#10;  'Emergency Fund',&#10;  'Fixed Deposit',&#10;  'Mutual Funds',&#10;  'Savings Account',&#10;  'PPF',&#10;  'Other'&#10;];&#10;&#10;const SavingsForm: React.FC&lt;SavingsFormProps&gt; = ({ account, onSubmit, onCancel, title }) =&gt; {&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    formState: { errors }&#10;  } = useForm&lt;FormData&gt;({&#10;    defaultValues: {&#10;      name: account?.name || '',&#10;      category: account?.category || 'Savings Account',&#10;      amount: account?.amount || 0,&#10;      description: account?.description || ''&#10;    }&#10;  });&#10;&#10;  const handleFormSubmit = (data: FormData) =&gt; {&#10;    const formattedData = {&#10;      ...data,&#10;      amount: Number(data.amount)&#10;    };&#10;    onSubmit(formattedData);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, scale: 0.95 }}&#10;        animate={{ opacity: 1, scale: 1 }}&#10;        exit={{ opacity: 0, scale: 0.95 }}&#10;        className=&quot;glass-card w-full max-w-lg&quot;&#10;      &gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-white&quot;&gt;{title}&lt;/h3&gt;&#10;          &lt;button&#10;            onClick={onCancel}&#10;            className=&quot;p-2 text-white/60 hover:text-white transition-colors&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-5 h-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit(handleFormSubmit)} className=&quot;space-y-6&quot;&gt;&#10;          {/* Account Name */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Account Name *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('name', { required: 'Account name is required' })}&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;e.g., Emergency Fund, SBI FD&quot;&#10;            /&gt;&#10;            {errors.name &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.name.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Category */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Category *&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              {...register('category', { required: 'Category is required' })}&#10;              className=&quot;glass-input w-full&quot;&#10;            &gt;&#10;              {savingsCategories.map(category =&gt; (&#10;                &lt;option key={category} value={category} className=&quot;bg-slate-800&quot;&gt;&#10;                  {category}&#10;                &lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;            {errors.category &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.category.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Amount */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Amount (â‚¹) *&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              {...register('amount', {&#10;                required: 'Amount is required',&#10;                min: { value: 0, message: 'Amount must be positive' }&#10;              })}&#10;              type=&quot;number&quot;&#10;              className=&quot;glass-input w-full&quot;&#10;              placeholder=&quot;50000&quot;&#10;            /&gt;&#10;            {errors.amount &amp;&amp; (&#10;              &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{errors.amount.message}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Description */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-white/90 text-sm font-medium mb-2&quot;&gt;&#10;              Description (Optional)&#10;            &lt;/label&gt;&#10;            &lt;textarea&#10;              {...register('description')}&#10;              className=&quot;glass-input w-full h-20 resize-none&quot;&#10;              placeholder=&quot;Additional details about this savings account...&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Form Actions */}&#10;          &lt;div className=&quot;flex space-x-4 pt-4&quot;&gt;&#10;            &lt;button&#10;              type=&quot;submit&quot;&#10;              className=&quot;glass-button flex-1 bg-green-500/20 hover:bg-green-500/30&quot;&#10;            &gt;&#10;              {account ? 'Update Account' : 'Add Account'}&#10;            &lt;/button&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={onCancel}&#10;              className=&quot;glass-button flex-1 bg-gray-500/20 hover:bg-gray-500/30&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/motion.div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default SavingsForm;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/hooks/useFinance.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/hooks/useFinance.ts" />
              <option name="originalContent" value="import { useState, useEffect, useCallback } from 'react';&#10;import { Loan, SavingsAccount, DashboardData, FinancialSuggestion } from '@/types';&#10;import { storage, autoRefresh } from '@/utils/storage';&#10;import {&#10;  calculateTotalDebt,&#10;  calculateTotalMonthlyEMI,&#10;  generateSuggestions,&#10;  calculateLoanDetails&#10;} from '@/utils/calculations';&#10;&#10;/**&#10; * Custom hook for managing loan data&#10; */&#10;export const useLoans = () =&gt; {&#10;  const [loans, setLoans] = useState&lt;Loan[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    const loadLoans = () =&gt; {&#10;      try {&#10;        const storedLoans = storage.getLoans();&#10;        setLoans(storedLoans);&#10;      } catch (error) {&#10;        console.error('Error loading loans:', error);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    loadLoans();&#10;  }, []);&#10;&#10;  const addLoan = useCallback((loan: Loan) =&gt; {&#10;    const updatedLoans = [...loans, loan];&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  const updateLoan = useCallback((loanId: string, updates: Partial&lt;Loan&gt;) =&gt; {&#10;    const updatedLoans = loans.map(loan =&gt; {&#10;      if (loan.id === loanId) {&#10;        const updatedLoan = { ...loan, ...updates };&#10;        return updatedLoan;&#10;      }&#10;      return loan;&#10;    });&#10;&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  const deleteLoan = useCallback((loanId: string) =&gt; {&#10;    const updatedLoans = loans.filter(loan =&gt; loan.id !== loanId);&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  const addPartPayment = useCallback((loanId: string, partPayment: any) =&gt; {&#10;    const updatedLoans = loans.map(loan =&gt; {&#10;      if (loan.id === loanId) {&#10;        const amt = Number(partPayment?.amount) || 0;&#10;        return {&#10;          ...loan,&#10;          partPayments: [...loan.partPayments, { ...partPayment, amount: amt }],&#10;          currentPrincipal: Math.max(0, Number(loan.currentPrincipal) - amt)&#10;        };&#10;      }&#10;      return loan;&#10;    });&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  const removeLastPartPayment = useCallback((loanId: string) =&gt; {&#10;    const updatedLoans = loans.map(loan =&gt; {&#10;      if (loan.id === loanId) {&#10;        if (loan.partPayments.length === 0) return loan;&#10;        const last = loan.partPayments[loan.partPayments.length - 1];&#10;        const amt = Number(last?.amount) || 0;&#10;        const restored = Number(loan.currentPrincipal) + amt;&#10;        const capped = Math.min(restored, Number(loan.principalAmount));&#10;        return {&#10;          ...loan,&#10;          partPayments: loan.partPayments.slice(0, -1),&#10;          currentPrincipal: capped&#10;        };&#10;      }&#10;      return loan;&#10;    });&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  return {&#10;    loans,&#10;    loading,&#10;    addLoan,&#10;    updateLoan,&#10;    deleteLoan,&#10;    addPartPayment,&#10;    removeLastPartPayment&#10;  };&#10;};&#10;&#10;/**&#10; * Custom hook for managing savings data&#10; */&#10;export const useSavings = () =&gt; {&#10;  const [savings, setSavings] = useState&lt;SavingsAccount[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    const loadSavings = () =&gt; {&#10;      try {&#10;        const storedSavings = storage.getSavings();&#10;        setSavings(storedSavings);&#10;      } catch (error) {&#10;        console.error('Error loading savings:', error);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    loadSavings();&#10;  }, []);&#10;&#10;  const addSavingsAccount = useCallback((account: SavingsAccount) =&gt; {&#10;    const updatedSavings = [...savings, account];&#10;    setSavings(updatedSavings);&#10;    storage.saveSavings(updatedSavings);&#10;  }, [savings]);&#10;&#10;  const updateSavingsAccount = useCallback((accountId: string, updates: Partial&lt;SavingsAccount&gt;) =&gt; {&#10;    const updatedSavings = savings.map(account =&gt;&#10;      account.id === accountId ? { ...account, ...updates } : account&#10;    );&#10;    setSavings(updatedSavings);&#10;    storage.saveSavings(updatedSavings);&#10;  }, [savings]);&#10;&#10;  const deleteSavingsAccount = useCallback((accountId: string) =&gt; {&#10;    const updatedSavings = savings.filter(account =&gt; account.id !== accountId);&#10;    setSavings(updatedSavings);&#10;    storage.saveSavings(updatedSavings);&#10;  }, [savings]);&#10;&#10;  const totalSavings = savings.reduce((total, account) =&gt; total + account.amount, 0);&#10;&#10;  return {&#10;    savings,&#10;    totalSavings,&#10;    loading,&#10;    addSavingsAccount,&#10;    updateSavingsAccount,&#10;    deleteSavingsAccount&#10;  };&#10;};&#10;&#10;/**&#10; * Custom hook for dashboard data and auto-refresh&#10; */&#10;export const useDashboard = () =&gt; {&#10;  const { loans, addPartPayment, removeLastPartPayment } = useLoans();&#10;  const { savings, totalSavings } = useSavings();&#10;  const [suggestions, setSuggestions] = useState&lt;FinancialSuggestion[]&gt;([]);&#10;  const [lastRefresh, setLastRefresh] = useState&lt;Date | null&gt;(null);&#10;&#10;  // Determine next EMI date as the earliest among active loans&#10;  const activeLoans = loans.filter(l =&gt; l.isActive);&#10;  const nextEmiDate = activeLoans.length&#10;    ? activeLoans&#10;        .map(l =&gt; calculateLoanDetails(l).nextEmiDate)&#10;        .sort((a, b) =&gt; a.getTime() - b.getTime())[0]&#10;    : new Date(new Date().getFullYear(), new Date().getMonth(), 5);&#10;&#10;  const dashboardData: DashboardData = {&#10;    totalOutstandingDebt: calculateTotalDebt(loans),&#10;    totalSavings,&#10;    monthlyEmi: calculateTotalMonthlyEMI(loans),&#10;    loans,&#10;    savings,&#10;    nextEmiDate&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    // Generate suggestions when loans change&#10;    const newSuggestions = generateSuggestions(loans);&#10;    setSuggestions(newSuggestions);&#10;  }, [loans]);&#10;&#10;  useEffect(() =&gt; {&#10;    // Check for auto-refresh&#10;    const shouldRefresh = autoRefresh.checkAndRefresh();&#10;    if (shouldRefresh) {&#10;      setLastRefresh(new Date());&#10;      // Trigger any refresh logic here&#10;    }&#10;&#10;    const storedLastRefresh = storage.getLastRefresh();&#10;    setLastRefresh(storedLastRefresh);&#10;  }, []);&#10;&#10;  return {&#10;    dashboardData,&#10;    suggestions,&#10;    lastRefresh,&#10;    addPartPayment,&#10;    removeLastPartPayment&#10;  };&#10;};&#10;" />
              <option name="updatedContent" value="import { useState, useEffect, useCallback } from 'react';&#10;import { Loan, SavingsAccount, DashboardData, FinancialSuggestion } from '@/types';&#10;import { storage, autoRefresh } from '@/utils/storage';&#10;import {&#10;  calculateTotalDebt,&#10;  calculateTotalMonthlyEMI,&#10;  generateSuggestions,&#10;  calculateLoanDetails&#10;} from '@/utils/calculations';&#10;&#10;/**&#10; * Custom hook for managing loan data&#10; */&#10;export const useLoans = () =&gt; {&#10;  const [loans, setLoans] = useState&lt;Loan[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    const loadLoans = () =&gt; {&#10;      try {&#10;        const storedLoans = storage.getLoans();&#10;        setLoans(storedLoans);&#10;      } catch (error) {&#10;        console.error('Error loading loans:', error);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    loadLoans();&#10;  }, []);&#10;&#10;  const addLoan = useCallback((loan: Loan) =&gt; {&#10;    const updatedLoans = [...loans, loan];&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  const updateLoan = useCallback((loanId: string, updates: Partial&lt;Loan&gt;) =&gt; {&#10;    const updatedLoans = loans.map(loan =&gt; {&#10;      if (loan.id === loanId) {&#10;        const updatedLoan = { ...loan, ...updates };&#10;        return updatedLoan;&#10;      }&#10;      return loan;&#10;    });&#10;&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  const deleteLoan = useCallback((loanId: string) =&gt; {&#10;    const updatedLoans = loans.filter(loan =&gt; loan.id !== loanId);&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  const addPartPayment = useCallback((loanId: string, partPayment: any) =&gt; {&#10;    const updatedLoans = loans.map(loan =&gt; {&#10;      if (loan.id === loanId) {&#10;        const amt = Number(partPayment?.amount) || 0;&#10;        // Use amortized outstanding as baseline&#10;        const details = calculateLoanDetails(loan);&#10;        const baselineOutstanding = Number(details.remainingPrincipal) || Number(loan.currentPrincipal) || 0;&#10;        return {&#10;          ...loan,&#10;          partPayments: [...loan.partPayments, { ...partPayment, amount: amt }],&#10;          currentPrincipal: Math.max(0, baselineOutstanding - amt)&#10;        };&#10;      }&#10;      return loan;&#10;    });&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  const removeLastPartPayment = useCallback((loanId: string) =&gt; {&#10;    const updatedLoans = loans.map(loan =&gt; {&#10;      if (loan.id === loanId) {&#10;        if (loan.partPayments.length === 0) return loan;&#10;        const last = loan.partPayments[loan.partPayments.length - 1];&#10;        const amt = Number(last?.amount) || 0;&#10;        const restored = Number(loan.currentPrincipal) + amt;&#10;        const capped = Math.min(restored, Number(loan.principalAmount));&#10;        return {&#10;          ...loan,&#10;          partPayments: loan.partPayments.slice(0, -1),&#10;          currentPrincipal: capped&#10;        };&#10;      }&#10;      return loan;&#10;    });&#10;    setLoans(updatedLoans);&#10;    storage.saveLoans(updatedLoans);&#10;  }, [loans]);&#10;&#10;  return {&#10;    loans,&#10;    loading,&#10;    addLoan,&#10;    updateLoan,&#10;    deleteLoan,&#10;    addPartPayment,&#10;    removeLastPartPayment&#10;  };&#10;};&#10;&#10;/**&#10; * Custom hook for managing savings data&#10; */&#10;export const useSavings = () =&gt; {&#10;  const [savings, setSavings] = useState&lt;SavingsAccount[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    const loadSavings = () =&gt; {&#10;      try {&#10;        const storedSavings = storage.getSavings();&#10;        setSavings(storedSavings);&#10;      } catch (error) {&#10;        console.error('Error loading savings:', error);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    loadSavings();&#10;  }, []);&#10;&#10;  const addSavingsAccount = useCallback((account: SavingsAccount) =&gt; {&#10;    const updatedSavings = [...savings, account];&#10;    setSavings(updatedSavings);&#10;    storage.saveSavings(updatedSavings);&#10;  }, [savings]);&#10;&#10;  const updateSavingsAccount = useCallback((accountId: string, updates: Partial&lt;SavingsAccount&gt;) =&gt; {&#10;    const updatedSavings = savings.map(account =&gt;&#10;      account.id === accountId ? { ...account, ...updates } : account&#10;    );&#10;    setSavings(updatedSavings);&#10;    storage.saveSavings(updatedSavings);&#10;  }, [savings]);&#10;&#10;  const deleteSavingsAccount = useCallback((accountId: string) =&gt; {&#10;    const updatedSavings = savings.filter(account =&gt; account.id !== accountId);&#10;    setSavings(updatedSavings);&#10;    storage.saveSavings(updatedSavings);&#10;  }, [savings]);&#10;&#10;  const totalSavings = savings.reduce((total, account) =&gt; total + account.amount, 0);&#10;&#10;  return {&#10;    savings,&#10;    totalSavings,&#10;    loading,&#10;    addSavingsAccount,&#10;    updateSavingsAccount,&#10;    deleteSavingsAccount&#10;  };&#10;};&#10;&#10;/**&#10; * Custom hook for dashboard data and auto-refresh&#10; */&#10;export const useDashboard = () =&gt; {&#10;  const { loans, addPartPayment, removeLastPartPayment } = useLoans();&#10;  const { savings, totalSavings } = useSavings();&#10;  const [suggestions, setSuggestions] = useState&lt;FinancialSuggestion[]&gt;([]);&#10;  const [lastRefresh, setLastRefresh] = useState&lt;Date | null&gt;(null);&#10;&#10;  // Determine next EMI date as the earliest among active loans&#10;  const activeLoans = loans.filter(l =&gt; l.isActive);&#10;  const nextEmiDate = activeLoans.length&#10;    ? activeLoans&#10;        .map(l =&gt; calculateLoanDetails(l).nextEmiDate)&#10;        .sort((a, b) =&gt; a.getTime() - b.getTime())[0]&#10;    : new Date(new Date().getFullYear(), new Date().getMonth(), 5);&#10;&#10;  const dashboardData: DashboardData = {&#10;    totalOutstandingDebt: calculateTotalDebt(loans),&#10;    totalSavings,&#10;    monthlyEmi: calculateTotalMonthlyEMI(loans),&#10;    loans,&#10;    savings,&#10;    nextEmiDate&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    // Generate suggestions when loans change&#10;    const newSuggestions = generateSuggestions(loans);&#10;    setSuggestions(newSuggestions);&#10;  }, [loans]);&#10;&#10;  useEffect(() =&gt; {&#10;    // Check for auto-refresh&#10;    const shouldRefresh = autoRefresh.checkAndRefresh();&#10;    if (shouldRefresh) {&#10;      setLastRefresh(new Date());&#10;      // Trigger any refresh logic here&#10;    }&#10;&#10;    const storedLastRefresh = storage.getLastRefresh();&#10;    setLastRefresh(storedLastRefresh);&#10;  }, []);&#10;&#10;  return {&#10;    dashboardData,&#10;    suggestions,&#10;    lastRefresh,&#10;    addPartPayment,&#10;    removeLastPartPayment&#10;  };&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/index.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/index.css" />
              <option name="originalContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@layer base {&#10;  * {&#10;    @apply border-border;&#10;  }&#10;  body {&#10;    @apply bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 min-h-screen;&#10;    font-family: 'Inter', system-ui, -apple-system, sans-serif;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  /* Glass morphism styles */&#10;  .glass {&#10;    @apply backdrop-blur-md bg-white/10 border border-white/20 shadow-xl;&#10;  }&#10;&#10;  .glass-card {&#10;    @apply glass rounded-2xl p-6 transition-all duration-300 hover:bg-white/15;&#10;  }&#10;&#10;  .glass-button {&#10;    @apply glass rounded-lg px-6 py-3 text-white font-medium transition-all duration-300 hover:bg-white/20 active:scale-95;&#10;  }&#10;&#10;  .glass-input {&#10;    @apply glass rounded-lg px-4 py-2 text-white placeholder:text-white/60 focus:ring-2 focus:ring-primary-400 focus:outline-none;&#10;  }&#10;&#10;  /* Navigation styles */&#10;  .nav-tab {&#10;    @apply relative px-6 py-3 text-white/70 font-medium transition-all duration-300 hover:text-white;&#10;  }&#10;&#10;  .nav-tab.active {&#10;    @apply text-white;&#10;  }&#10;&#10;  .nav-tab.active::after {&#10;    @apply absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-primary-400 to-purple-400 content-[''];&#10;  }&#10;&#10;  /* Chart container styles */&#10;  .chart-container {&#10;    @apply glass-card h-80 flex items-center justify-center;&#10;  }&#10;&#10;  /* Table styles */&#10;  .glass-table {&#10;    @apply glass rounded-lg overflow-hidden;&#10;  }&#10;&#10;  .glass-table th {&#10;    @apply bg-white/5 px-6 py-4 text-left text-white/90 font-semibold border-b border-white/10;&#10;  }&#10;&#10;  .glass-table td {&#10;    @apply px-6 py-4 text-white/80 border-b border-white/5;&#10;  }&#10;&#10;  .glass-table tr:hover {&#10;    @apply bg-white/5;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@layer base {&#10;  * {&#10;    @apply box-border;&#10;  }&#10;  body {&#10;    @apply bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 min-h-screen;&#10;    font-family: 'Inter', system-ui, -apple-system, sans-serif;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  /* Glass morphism styles */&#10;  .glass {&#10;    @apply backdrop-blur-md bg-white/10 border border-white/20 shadow-xl;&#10;  }&#10;&#10;  .glass-card {&#10;    @apply glass rounded-2xl p-6 transition-all duration-300 hover:bg-white/15;&#10;  }&#10;&#10;  .glass-button {&#10;    @apply glass rounded-lg px-6 py-3 text-white font-medium transition-all duration-300 hover:bg-white/20 active:scale-95;&#10;  }&#10;&#10;  .glass-input {&#10;    @apply glass rounded-lg px-4 py-2 text-white placeholder:text-white/60 focus:ring-2 focus:ring-primary-400 focus:outline-none;&#10;  }&#10;&#10;  /* Navigation styles */&#10;  .nav-tab {&#10;    @apply relative px-6 py-3 text-white/70 font-medium transition-all duration-300 hover:text-white;&#10;  }&#10;&#10;  .nav-tab.active {&#10;    @apply text-white;&#10;  }&#10;&#10;  .nav-tab.active::after {&#10;    @apply absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-primary-400 to-purple-400 content-[''];&#10;  }&#10;&#10;  /* Chart container styles */&#10;  .chart-container {&#10;    @apply glass-card h-80 flex items-center justify-center;&#10;  }&#10;&#10;  /* Table styles */&#10;  .glass-table {&#10;    @apply glass rounded-lg overflow-hidden;&#10;  }&#10;&#10;  .glass-table th {&#10;    @apply bg-white/5 px-6 py-4 text-left text-white/90 font-semibold border-b border-white/10;&#10;  }&#10;&#10;  .glass-table td {&#10;    @apply px-6 py-4 text-white/80 border-b border-white/5;&#10;  }&#10;&#10;  .glass-table tr:hover {&#10;    @apply bg-white/5;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main.tsx" />
              <option name="updatedContent" value="import React from 'react'&#10;import ReactDOM from 'react-dom/client'&#10;import App from './App.tsx'&#10;import './index.css'&#10;&#10;ReactDOM.createRoot(document.getElementById('root')!).render(&#10;  &lt;React.StrictMode&gt;&#10;    &lt;App /&gt;&#10;  &lt;/React.StrictMode&gt;,&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types/index.ts" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="export interface Loan {&#10;  id: string;&#10;  name: string;&#10;  principalAmount: number;&#10;  currentPrincipal: number;&#10;  interestRate: number;&#10;  emiAmount: number;&#10;  startDate: Date;&#10;  tenure: number; // in months&#10;  lastEmiDate?: Date;&#10;  nextEmiDate: Date;&#10;  isActive: boolean;&#10;  partPayments: PartPayment[];&#10;  interestRateChanges: InterestRateChange[];&#10;  // Custom EMI support (optional for backward compatibility)&#10;  useCustomEmi?: boolean;&#10;  customEmi?: number;&#10;}&#10;&#10;export interface PartPayment {&#10;  id: string;&#10;  amount: number;&#10;  date: Date;&#10;  description?: string;&#10;}&#10;&#10;export interface InterestRateChange {&#10;  id: string;&#10;  oldRate: number;&#10;  newRate: number;&#10;  effectiveDate: Date;&#10;  reason?: string;&#10;}&#10;&#10;export interface SavingsAccount {&#10;  id: string;&#10;  name: string;&#10;  category: SavingsCategory;&#10;  amount: number;&#10;  dateAdded: Date;&#10;  lastUpdated: Date;&#10;  description?: string;&#10;}&#10;&#10;export type SavingsCategory =&#10;  | 'Emergency Fund'&#10;  | 'Fixed Deposit'&#10;  | 'Mutual Funds'&#10;  | 'Savings Account'&#10;  | 'PPF'&#10;  | 'Other';&#10;&#10;export interface DashboardData {&#10;  totalOutstandingDebt: number;&#10;  totalSavings: number;&#10;  monthlyEmi: number;&#10;  loans: Loan[];&#10;  savings: SavingsAccount[];&#10;  nextEmiDate: Date;&#10;}&#10;&#10;export interface FinancialSuggestion {&#10;  id: string;&#10;  type: 'part_payment' | 'rate_change' | 'savings' | 'general';&#10;  title: string;&#10;  description: string;&#10;  priority: 'high' | 'medium' | 'low';&#10;  potentialSavings?: number;&#10;  loanId?: string;&#10;}&#10;&#10;export interface LoanCalculation {&#10;  emiAmount: number;&#10;  totalInterest: number;&#10;  totalAmount: number;&#10;  remainingEmis: number;&#10;  remainingPrincipal: number;&#10;  nextEmiDate: Date;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/calculations.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/calculations.ts" />
              <option name="originalContent" value="import { Loan, LoanCalculation, FinancialSuggestion } from '@/types';&#10;import { addMonths, differenceInMonths, format, startOfMonth } from 'date-fns';&#10;&#10;/**&#10; * Calculate EMI using the standard formula&#10; * EMI = P * r * (1 + r)^n / ((1 + r)^n - 1)&#10; */&#10;export const calculateEMI = (&#10;  principal: number,&#10;  annualRate: number,&#10;  tenureMonths: number&#10;): number =&gt; {&#10;  const monthlyRate = annualRate / 100 / 12;&#10;  if (tenureMonths &lt;= 0 || principal &lt;= 0 || monthlyRate &lt;= 0) return 0;&#10;  const compound = Math.pow(1 + monthlyRate, tenureMonths);&#10;  return (principal * monthlyRate * compound) / (compound - 1);&#10;};&#10;&#10;// Choose the EMI to use for display/calculation (custom when enabled)&#10;const getSelectedEmi = (loan: Loan): number =&gt; {&#10;  if (loan.useCustomEmi &amp;&amp; loan.customEmi &amp;&amp; loan.customEmi &gt; 0) {&#10;    return Number(loan.customEmi);&#10;  }&#10;  // Use original generated EMI (based on original inputs)&#10;  return calculateEMI(Number(loan.principalAmount), Number(loan.interestRate), Number(loan.tenure));&#10;};&#10;&#10;// Count how many EMIs have been paid based on the 5th-of-month schedule&#10;const getEmisPaid = (loan: Loan, today: Date): number =&gt; {&#10;  const firstDueBase = new Date(loan.startDate.getFullYear(), loan.startDate.getMonth(), 5);&#10;  const firstDue = loan.startDate.getDate() &gt; 5 ? addMonths(firstDueBase, 1) : firstDueBase;&#10;&#10;  // If loan hasn't reached first due date yet&#10;  if (today &lt; firstDue) return 0;&#10;&#10;  // Determine last paid anchor (5th). On/after 5th =&gt; current month; before 5th =&gt; previous month&#10;  const lastPaidAnchor = today.getDate() &gt;= 5&#10;    ? new Date(today.getFullYear(), today.getMonth(), 5)&#10;    : new Date(today.getFullYear(), today.getMonth() - 1, 5);&#10;&#10;  const monthsBetween = differenceInMonths(lastPaidAnchor, firstDue);&#10;  const emisPaid = monthsBetween + 1; // include both endpoints&#10;  return Math.max(0, Math.min(emisPaid, Number(loan.tenure)));&#10;};&#10;&#10;/**&#10; * Calculate remaining EMIs and other loan details&#10; */&#10;export const calculateLoanDetails = (loan: Loan): LoanCalculation =&gt; {&#10;  const today = new Date();&#10;&#10;  // Scheduled EMIs paid so far (used for fallback/schedule only)&#10;  const emisPaid = getEmisPaid(loan, today);&#10;&#10;  const monthlyRate = Number(loan.interestRate) / 100 / 12;&#10;  const selectedEmi = getSelectedEmi(loan);&#10;&#10;  // Use currentPrincipal as source of truth (already reflects past EMIs/part-payments from imported data)&#10;  const outstandingNow = Math.max(0, Number(loan.currentPrincipal));&#10;  let remainingPrincipal = outstandingNow;&#10;&#10;  // Next EMI date (5th of current or next month)&#10;  let nextEmiDate = new Date(today.getFullYear(), today.getMonth(), 5);&#10;  if (today.getDate() &gt;= 5) {&#10;    nextEmiDate = addMonths(nextEmiDate, 1);&#10;  }&#10;&#10;  // Simulate forward from outstanding to get months to finish and total interest&#10;  let remainingEmis = 0;&#10;  let totalInterest = 0;&#10;  if (remainingPrincipal &gt; 0 &amp;&amp; selectedEmi &gt; 0) {&#10;    let rp = remainingPrincipal;&#10;    const safetyCap = 1200; // 100 years&#10;    while (rp &gt; 0 &amp;&amp; remainingEmis &lt; safetyCap) {&#10;      const interest = rp * monthlyRate;&#10;      const principalPay = Math.max(0, selectedEmi - interest);&#10;      if (principalPay &lt;= 0) {&#10;        // EMI too low to cover interest; avoid infinite loop&#10;        break;&#10;      }&#10;      totalInterest += interest;&#10;      rp = Math.max(0, rp - principalPay);&#10;      remainingEmis++;&#10;    }&#10;  }&#10;&#10;  // Upper-bound by schedule so it can't increase over time&#10;  const scheduledRemaining = Math.max(0, Number(loan.tenure) - emisPaid);&#10;  if (remainingEmis === 0 &amp;&amp; (remainingPrincipal &gt; 0 &amp;&amp; selectedEmi &gt; 0)) {&#10;    // If for some reason we couldn't simulate, fall back to schedule&#10;    remainingEmis = scheduledRemaining;&#10;  } else if (remainingEmis &gt; scheduledRemaining) {&#10;    remainingEmis = scheduledRemaining;&#10;  }&#10;&#10;  const totalAmount = remainingPrincipal + totalInterest;&#10;&#10;  return {&#10;    emiAmount: selectedEmi,&#10;    totalInterest: Math.max(0, totalInterest),&#10;    totalAmount: Math.max(0, totalAmount),&#10;    remainingEmis,&#10;    remainingPrincipal: Math.max(0, remainingPrincipal),&#10;    nextEmiDate&#10;  };&#10;};&#10;&#10;/**&#10; * Calculate total outstanding debt across all loans&#10; */&#10;export const calculateTotalDebt = (loans: Loan[]): number =&gt; {&#10;  return loans&#10;    .filter(loan =&gt; loan.isActive)&#10;    .reduce((total, loan) =&gt; {&#10;      const details = calculateLoanDetails(loan);&#10;      return total + details.remainingPrincipal;&#10;    }, 0);&#10;};&#10;&#10;/**&#10; * Calculate total monthly EMI&#10; */&#10;export const calculateTotalMonthlyEMI = (loans: Loan[]): number =&gt; {&#10;  return loans&#10;    .filter(loan =&gt; loan.isActive)&#10;    .reduce((total, loan) =&gt; {&#10;      const details = calculateLoanDetails(loan);&#10;      return total + (details.remainingEmis &gt; 0 ? details.emiAmount : 0);&#10;    }, 0);&#10;};&#10;&#10;/**&#10; * Generate financial suggestions based on loan portfolio&#10; */&#10;export const generateSuggestions = (loans: Loan[]): FinancialSuggestion[] =&gt; {&#10;  const suggestions: FinancialSuggestion[] = [];&#10;  const activeLoans = loans.filter(loan =&gt; loan.isActive);&#10;&#10;  if (activeLoans.length === 0) return suggestions;&#10;&#10;  // Sort loans by interest rate (highest first) for part payment suggestions&#10;  const sortedByRate = [...activeLoans].sort((a, b) =&gt; Number(b.interestRate) - Number(a.interestRate));&#10;&#10;  // Suggest part payment for highest interest rate loan&#10;  if (sortedByRate.length &gt; 0) {&#10;    const highestRateLoan = sortedByRate[0];&#10;    const details = calculateLoanDetails(highestRateLoan);&#10;&#10;    if (details.remainingEmis &gt; 12) { // Only suggest if more than 1 year remaining&#10;      const potentialSavings = calculatePartPaymentSavings(highestRateLoan, 50000);&#10;&#10;      suggestions.push({&#10;        id: `part-payment-${highestRateLoan.id}`,&#10;        type: 'part_payment',&#10;        title: `Consider Part Payment for ${highestRateLoan.name}`,&#10;        description: `Making a part payment on your highest interest loan (${Number(highestRateLoan.interestRate)}% p.a.) can save significant interest.`,&#10;        priority: 'high',&#10;        potentialSavings,&#10;        loanId: highestRateLoan.id&#10;      });&#10;    }&#10;  }&#10;&#10;  // Suggest focusing on shortest tenure high-rate loans&#10;  const shortTermHighRate = activeLoans.filter(loan =&gt; {&#10;    const details = calculateLoanDetails(loan);&#10;    return details.remainingEmis &lt;= 24 &amp;&amp; Number(loan.interestRate) &gt; 8;&#10;  });&#10;&#10;  if (shortTermHighRate.length &gt; 0) {&#10;    suggestions.push({&#10;      id: 'focus-short-term',&#10;      type: 'general',&#10;      title: 'Focus on Short-term High-rate Loans',&#10;      description: 'Consider paying off loans with less than 2 years remaining and high interest rates first.',&#10;      priority: 'medium'&#10;    });&#10;  }&#10;&#10;  // Emergency fund suggestion&#10;  suggestions.push({&#10;    id: 'emergency-fund',&#10;    type: 'savings',&#10;    title: 'Maintain Emergency Fund',&#10;    description: 'Ensure you have 6-12 months of expenses saved before aggressive debt repayment.',&#10;    priority: 'high'&#10;    });&#10;&#10;  return suggestions;&#10;};&#10;&#10;/**&#10; * Calculate potential savings from part payment&#10; */&#10;export const calculatePartPaymentSavings = (loan: Loan, partPaymentAmount: number): number =&gt; {&#10;  const currentDetails = calculateLoanDetails(loan);&#10;&#10;  if (currentDetails.remainingPrincipal &lt;= partPaymentAmount) {&#10;    return currentDetails.totalInterest;&#10;  }&#10;&#10;  const newPrincipal = currentDetails.remainingPrincipal - partPaymentAmount;&#10;  const newEMI = getSelectedEmi(loan);&#10;&#10;  // Simulate new total interest with same EMI until finished&#10;  const monthlyRate = Number(loan.interestRate) / 100 / 12;&#10;  let rp = newPrincipal;&#10;  let totalInterest = 0;&#10;  const safetyCap = 1200;&#10;  for (let i = 0; i &lt; safetyCap &amp;&amp; rp &gt; 0; i++) {&#10;    const interest = rp * monthlyRate;&#10;    const principalPay = Math.max(0, newEMI - interest);&#10;    totalInterest += interest;&#10;    rp = Math.max(0, rp - principalPay);&#10;    if (principalPay &lt;= 0) break;&#10;  }&#10;&#10;  return Math.max(0, currentDetails.totalInterest - totalInterest);&#10;};&#10;&#10;/**&#10; * Format currency for display&#10; */&#10;export const formatCurrency = (amount: number): string =&gt; {&#10;  return new Intl.NumberFormat('en-IN', {&#10;    style: 'currency',&#10;    currency: 'INR',&#10;    minimumFractionDigits: 0,&#10;    maximumFractionDigits: 0,&#10;  }).format(Number(amount) || 0);&#10;};&#10;&#10;/**&#10; * Format date for display&#10; */&#10;export const formatDate = (date: Date): string =&gt; {&#10;  return format(date, 'dd MMM yyyy');&#10;};&#10;&#10;/**&#10; * Check if dashboard should auto-refresh (5th of every month)&#10; */&#10;export const shouldAutoRefresh = (): boolean =&gt; {&#10;  const today = new Date();&#10;  const lastRefresh = localStorage.getItem('lastDashboardRefresh');&#10;&#10;  if (!lastRefresh) return true;&#10;&#10;  const lastRefreshDate = new Date(lastRefresh);&#10;  const currentMonth = startOfMonth(today);&#10;  const lastRefreshMonth = startOfMonth(lastRefreshDate);&#10;&#10;  return currentMonth &gt; lastRefreshMonth &amp;&amp; today.getDate() &gt;= 5;&#10;};&#10;&#10;/**&#10; * Calculate monthly loan projection data for charts&#10; */&#10;export const calculateLoanProjection = (loan: Loan): {&#10;  month: number;&#10;  principalPayment: number;&#10;  interestPayment: number;&#10;  remainingPrincipal: number;&#10;}[] =&gt; {&#10;  const details = calculateLoanDetails(loan);&#10;  const monthlyRate = Number(loan.interestRate) / 100 / 12;&#10;  let remainingPrincipal = details.remainingPrincipal;&#10;  const projection = [] as { month: number; principalPayment: number; interestPayment: number; remainingPrincipal: number; }[];&#10;&#10;  for (let month = 1; month &lt;= Math.min(details.remainingEmis, 60); month++) { // Show max 5 years&#10;    const interestPayment = remainingPrincipal * monthlyRate;&#10;    const principalPayment = Math.max(0, details.emiAmount - interestPayment);&#10;    remainingPrincipal = Math.max(0, remainingPrincipal - principalPayment);&#10;&#10;    projection.push({&#10;      month,&#10;      principalPayment,&#10;      interestPayment,&#10;      remainingPrincipal&#10;    });&#10;&#10;    if (remainingPrincipal &lt;= 0) break;&#10;  }&#10;&#10;  return projection;&#10;};&#10;&#10;/**&#10; * Get combined projection data for all active loans&#10; */&#10;export const getCombinedLoanProjection = (loans: Loan[]): {&#10;  month: number;&#10;  totalPrincipalPayment: number;&#10;  totalInterestPayment: number;&#10;  totalRemainingPrincipal: number;&#10;}[] =&gt; {&#10;  const activeLoans = loans.filter(loan =&gt; loan.isActive);&#10;  const maxMonths = 60; // 5 years&#10;  const combinedData = [] as { month: number; totalPrincipalPayment: number; totalInterestPayment: number; totalRemainingPrincipal: number; }[];&#10;&#10;  for (let month = 1; month &lt;= maxMonths; month++) {&#10;    let totalPrincipalPayment = 0;&#10;    let totalInterestPayment = 0;&#10;    let totalRemainingPrincipal = 0;&#10;&#10;    activeLoans.forEach(loan =&gt; {&#10;      const projection = calculateLoanProjection(loan);&#10;      const monthData = projection.find(p =&gt; p.month === month);&#10;&#10;      if (monthData) {&#10;        totalPrincipalPayment += monthData.principalPayment;&#10;        totalInterestPayment += monthData.interestPayment;&#10;        totalRemainingPrincipal += monthData.remainingPrincipal;&#10;      }&#10;    });&#10;&#10;    if (totalRemainingPrincipal &lt;= 0 &amp;&amp; month &gt; 1) break;&#10;&#10;    combinedData.push({&#10;      month,&#10;      totalPrincipalPayment,&#10;      totalInterestPayment,&#10;      totalRemainingPrincipal&#10;    });&#10;  }&#10;&#10;  return combinedData;&#10;};&#10;" />
              <option name="updatedContent" value="import { Loan, LoanCalculation, FinancialSuggestion } from '@/types';&#10;import { addMonths, differenceInMonths, format, startOfMonth } from 'date-fns';&#10;&#10;/**&#10; * Calculate EMI using the standard formula&#10; * EMI = P * r * (1 + r)^n / ((1 + r)^n - 1)&#10; */&#10;export const calculateEMI = (&#10;  principal: number,&#10;  annualRate: number,&#10;  tenureMonths: number&#10;): number =&gt; {&#10;  const monthlyRate = annualRate / 100 / 12;&#10;  if (tenureMonths &lt;= 0 || principal &lt;= 0 || monthlyRate &lt;= 0) return 0;&#10;  const compound = Math.pow(1 + monthlyRate, tenureMonths);&#10;  return (principal * monthlyRate * compound) / (compound - 1);&#10;};&#10;&#10;// Choose the EMI to use for display/calculation (custom when enabled)&#10;const getSelectedEmi = (loan: Loan): number =&gt; {&#10;  if (loan.useCustomEmi &amp;&amp; loan.customEmi &amp;&amp; loan.customEmi &gt; 0) {&#10;    return Number(loan.customEmi);&#10;  }&#10;  // Use original generated EMI (based on original inputs)&#10;  return calculateEMI(Number(loan.principalAmount), Number(loan.interestRate), Number(loan.tenure));&#10;};&#10;&#10;// Count how many EMIs have been paid based on the 5th-of-month schedule&#10;const getEmisPaid = (loan: Loan, today: Date): number =&gt; {&#10;  const firstDueBase = new Date(loan.startDate.getFullYear(), loan.startDate.getMonth(), 5);&#10;  const firstDue = loan.startDate.getDate() &gt; 5 ? addMonths(firstDueBase, 1) : firstDueBase;&#10;&#10;  // If loan hasn't reached first due date yet&#10;  if (today &lt; firstDue) return 0;&#10;&#10;  // Determine last paid anchor (5th). On/after 5th =&gt; current month; before 5th =&gt; previous month&#10;  const lastPaidAnchor = today.getDate() &gt;= 5&#10;    ? new Date(today.getFullYear(), today.getMonth(), 5)&#10;    : new Date(today.getFullYear(), today.getMonth() - 1, 5);&#10;&#10;  const monthsBetween = differenceInMonths(lastPaidAnchor, firstDue);&#10;  const emisPaid = monthsBetween + 1; // include both endpoints&#10;  return Math.max(0, Math.min(emisPaid, Number(loan.tenure)));&#10;};&#10;&#10;/**&#10; * Calculate remaining EMIs and other loan details&#10; */&#10;export const calculateLoanDetails = (loan: Loan): LoanCalculation =&gt; {&#10;  const today = new Date();&#10;&#10;  // Scheduled EMIs paid so far (used for fallback/schedule only)&#10;  const emisPaid = getEmisPaid(loan, today);&#10;&#10;  const monthlyRate = Number(loan.interestRate) / 100 / 12;&#10;  const selectedEmi = getSelectedEmi(loan);&#10;&#10;  // Use currentPrincipal as source of truth (already reflects past EMIs/part-payments from imported data)&#10;  const outstandingNow = Math.max(0, Number(loan.currentPrincipal));&#10;  let remainingPrincipal = outstandingNow;&#10;&#10;  // Heuristic: if currentPrincipal equals original principal and no lastEmiDate, apply scheduled EMIs already paid&#10;  const shouldApplyPaidEmiReduction = (!loan.lastEmiDate) &amp;&amp; (Math.abs(Number(loan.principalAmount) - Number(loan.currentPrincipal)) &lt; 1);&#10;  if (shouldApplyPaidEmiReduction &amp;&amp; emisPaid &gt; 0 &amp;&amp; selectedEmi &gt; 0) {&#10;    for (let m = 0; m &lt; emisPaid &amp;&amp; remainingPrincipal &gt; 0; m++) {&#10;      const interestPortion = remainingPrincipal * monthlyRate;&#10;      const principalPortion = Math.max(0, selectedEmi - interestPortion);&#10;      if (principalPortion &lt;= 0) break;&#10;      remainingPrincipal = Math.max(0, remainingPrincipal - principalPortion);&#10;    }&#10;  }&#10;&#10;  // Next EMI date (5th of current or next month)&#10;  let nextEmiDate = new Date(today.getFullYear(), today.getMonth(), 5);&#10;  if (today.getDate() &gt;= 5) {&#10;    nextEmiDate = addMonths(nextEmiDate, 1);&#10;  }&#10;&#10;  // Simulate forward from outstanding to get months to finish and total interest&#10;  let remainingEmis = 0;&#10;  let totalInterest = 0;&#10;  if (remainingPrincipal &gt; 0 &amp;&amp; selectedEmi &gt; 0) {&#10;    let rp = remainingPrincipal;&#10;    const safetyCap = 1200; // 100 years&#10;    while (rp &gt; 0 &amp;&amp; remainingEmis &lt; safetyCap) {&#10;      const interest = rp * monthlyRate;&#10;      const principalPay = Math.max(0, selectedEmi - interest);&#10;      if (principalPay &lt;= 0) {&#10;        // EMI too low to cover interest; avoid infinite loop&#10;        break;&#10;      }&#10;      totalInterest += interest;&#10;      rp = Math.max(0, rp - principalPay);&#10;      remainingEmis++;&#10;    }&#10;  }&#10;&#10;  // Upper-bound by schedule so it can't increase over time&#10;  const scheduledRemaining = Math.max(0, Number(loan.tenure) - emisPaid);&#10;  if (remainingEmis === 0 &amp;&amp; (remainingPrincipal &gt; 0 &amp;&amp; selectedEmi &gt; 0)) {&#10;    // If for some reason we couldn't simulate, fall back to schedule&#10;    remainingEmis = scheduledRemaining;&#10;  } else if (remainingEmis &gt; scheduledRemaining) {&#10;    remainingEmis = scheduledRemaining;&#10;  }&#10;&#10;  const totalAmount = remainingPrincipal + totalInterest;&#10;&#10;  return {&#10;    emiAmount: selectedEmi,&#10;    totalInterest: Math.max(0, totalInterest),&#10;    totalAmount: Math.max(0, totalAmount),&#10;    remainingEmis,&#10;    remainingPrincipal: Math.max(0, remainingPrincipal),&#10;    nextEmiDate&#10;  };&#10;};&#10;&#10;/**&#10; * Calculate total outstanding debt across all loans&#10; */&#10;export const calculateTotalDebt = (loans: Loan[]): number =&gt; {&#10;  return loans&#10;    .filter(loan =&gt; loan.isActive)&#10;    .reduce((total, loan) =&gt; {&#10;      const details = calculateLoanDetails(loan);&#10;      return total + details.remainingPrincipal;&#10;    }, 0);&#10;};&#10;&#10;/**&#10; * Calculate total monthly EMI&#10; */&#10;export const calculateTotalMonthlyEMI = (loans: Loan[]): number =&gt; {&#10;  return loans&#10;    .filter(loan =&gt; loan.isActive)&#10;    .reduce((total, loan) =&gt; {&#10;      const details = calculateLoanDetails(loan);&#10;      return total + (details.remainingEmis &gt; 0 ? details.emiAmount : 0);&#10;    }, 0);&#10;};&#10;&#10;/**&#10; * Generate financial suggestions based on loan portfolio&#10; */&#10;export const generateSuggestions = (loans: Loan[]): FinancialSuggestion[] =&gt; {&#10;  const suggestions: FinancialSuggestion[] = [];&#10;  const activeLoans = loans.filter(loan =&gt; loan.isActive);&#10;&#10;  if (activeLoans.length === 0) return suggestions;&#10;&#10;  // Sort loans by interest rate (highest first) for part payment suggestions&#10;  const sortedByRate = [...activeLoans].sort((a, b) =&gt; Number(b.interestRate) - Number(a.interestRate));&#10;&#10;  // Suggest part payment for highest interest rate loan&#10;  if (sortedByRate.length &gt; 0) {&#10;    const highestRateLoan = sortedByRate[0];&#10;    const details = calculateLoanDetails(highestRateLoan);&#10;&#10;    if (details.remainingEmis &gt; 12) { // Only suggest if more than 1 year remaining&#10;      const potentialSavings = calculatePartPaymentSavings(highestRateLoan, 50000);&#10;&#10;      suggestions.push({&#10;        id: `part-payment-${highestRateLoan.id}`,&#10;        type: 'part_payment',&#10;        title: `Consider Part Payment for ${highestRateLoan.name}`,&#10;        description: `Making a part payment on your highest interest loan (${Number(highestRateLoan.interestRate)}% p.a.) can save significant interest.`,&#10;        priority: 'high',&#10;        potentialSavings,&#10;        loanId: highestRateLoan.id&#10;      });&#10;    }&#10;  }&#10;&#10;  // Suggest focusing on shortest tenure high-rate loans&#10;  const shortTermHighRate = activeLoans.filter(loan =&gt; {&#10;    const details = calculateLoanDetails(loan);&#10;    return details.remainingEmis &lt;= 24 &amp;&amp; Number(loan.interestRate) &gt; 8;&#10;  });&#10;&#10;  if (shortTermHighRate.length &gt; 0) {&#10;    suggestions.push({&#10;      id: 'focus-short-term',&#10;      type: 'general',&#10;      title: 'Focus on Short-term High-rate Loans',&#10;      description: 'Consider paying off loans with less than 2 years remaining and high interest rates first.',&#10;      priority: 'medium'&#10;    });&#10;  }&#10;&#10;  // Emergency fund suggestion&#10;  suggestions.push({&#10;    id: 'emergency-fund',&#10;    type: 'savings',&#10;    title: 'Maintain Emergency Fund',&#10;    description: 'Ensure you have 6-12 months of expenses saved before aggressive debt repayment.',&#10;    priority: 'high'&#10;    });&#10;&#10;  return suggestions;&#10;};&#10;&#10;/**&#10; * Calculate potential savings from part payment&#10; */&#10;export const calculatePartPaymentSavings = (loan: Loan, partPaymentAmount: number): number =&gt; {&#10;  const currentDetails = calculateLoanDetails(loan);&#10;&#10;  if (currentDetails.remainingPrincipal &lt;= partPaymentAmount) {&#10;    return currentDetails.totalInterest;&#10;  }&#10;&#10;  const newPrincipal = currentDetails.remainingPrincipal - partPaymentAmount;&#10;  const newEMI = getSelectedEmi(loan);&#10;&#10;  // Simulate new total interest with same EMI until finished&#10;  const monthlyRate = Number(loan.interestRate) / 100 / 12;&#10;  let rp = newPrincipal;&#10;  let totalInterest = 0;&#10;  const safetyCap = 1200;&#10;  for (let i = 0; i &lt; safetyCap &amp;&amp; rp &gt; 0; i++) {&#10;    const interest = rp * monthlyRate;&#10;    const principalPay = Math.max(0, newEMI - interest);&#10;    totalInterest += interest;&#10;    rp = Math.max(0, rp - principalPay);&#10;    if (principalPay &lt;= 0) break;&#10;  }&#10;&#10;  return Math.max(0, currentDetails.totalInterest - totalInterest);&#10;};&#10;&#10;/**&#10; * Format currency for display&#10; */&#10;export const formatCurrency = (amount: number): string =&gt; {&#10;  return new Intl.NumberFormat('en-IN', {&#10;    style: 'currency',&#10;    currency: 'INR',&#10;    minimumFractionDigits: 0,&#10;    maximumFractionDigits: 0,&#10;  }).format(Number(amount) || 0);&#10;};&#10;&#10;/**&#10; * Format date for display&#10; */&#10;export const formatDate = (date: Date): string =&gt; {&#10;  return format(date, 'dd MMM yyyy');&#10;};&#10;&#10;/**&#10; * Check if dashboard should auto-refresh (5th of every month)&#10; */&#10;export const shouldAutoRefresh = (): boolean =&gt; {&#10;  const today = new Date();&#10;  const lastRefresh = localStorage.getItem('lastDashboardRefresh');&#10;&#10;  if (!lastRefresh) return true;&#10;&#10;  const lastRefreshDate = new Date(lastRefresh);&#10;  const currentMonth = startOfMonth(today);&#10;  const lastRefreshMonth = startOfMonth(lastRefreshDate);&#10;&#10;  return currentMonth &gt; lastRefreshMonth &amp;&amp; today.getDate() &gt;= 5;&#10;};&#10;&#10;/**&#10; * Calculate monthly loan projection data for charts&#10; */&#10;export const calculateLoanProjection = (loan: Loan): {&#10;  month: number;&#10;  principalPayment: number;&#10;  interestPayment: number;&#10;  remainingPrincipal: number;&#10;}[] =&gt; {&#10;  const details = calculateLoanDetails(loan);&#10;  const monthlyRate = Number(loan.interestRate) / 100 / 12;&#10;  let remainingPrincipal = details.remainingPrincipal;&#10;  const projection = [] as { month: number; principalPayment: number; interestPayment: number; remainingPrincipal: number; }[];&#10;&#10;  for (let month = 1; month &lt;= Math.min(details.remainingEmis, 60); month++) { // Show max 5 years&#10;    const interestPayment = remainingPrincipal * monthlyRate;&#10;    const principalPayment = Math.max(0, details.emiAmount - interestPayment);&#10;    remainingPrincipal = Math.max(0, remainingPrincipal - principalPayment);&#10;&#10;    projection.push({&#10;      month,&#10;      principalPayment,&#10;      interestPayment,&#10;      remainingPrincipal&#10;    });&#10;&#10;    if (remainingPrincipal &lt;= 0) break;&#10;  }&#10;&#10;  return projection;&#10;};&#10;&#10;/**&#10; * Get combined projection data for all active loans&#10; */&#10;export const getCombinedLoanProjection = (loans: Loan[]): {&#10;  month: number;&#10;  totalPrincipalPayment: number;&#10;  totalInterestPayment: number;&#10;  totalRemainingPrincipal: number;&#10;}[] =&gt; {&#10;  const activeLoans = loans.filter(loan =&gt; loan.isActive);&#10;  const maxMonths = 60; // 5 years&#10;  const combinedData = [] as { month: number; totalPrincipalPayment: number; totalInterestPayment: number; totalRemainingPrincipal: number; }[];&#10;&#10;  for (let month = 1; month &lt;= maxMonths; month++) {&#10;    let totalPrincipalPayment = 0;&#10;    let totalInterestPayment = 0;&#10;    let totalRemainingPrincipal = 0;&#10;&#10;    activeLoans.forEach(loan =&gt; {&#10;      const projection = calculateLoanProjection(loan);&#10;      const monthData = projection.find(p =&gt; p.month === month);&#10;&#10;      if (monthData) {&#10;        totalPrincipalPayment += monthData.principalPayment;&#10;        totalInterestPayment += monthData.interestPayment;&#10;        totalRemainingPrincipal += monthData.remainingPrincipal;&#10;      }&#10;    });&#10;&#10;    if (totalRemainingPrincipal &lt;= 0 &amp;&amp; month &gt; 1) break;&#10;&#10;    combinedData.push({&#10;      month,&#10;      totalPrincipalPayment,&#10;      totalInterestPayment,&#10;      totalRemainingPrincipal&#10;    });&#10;  }&#10;&#10;  return combinedData;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/storage.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/storage.ts" />
              <option name="originalContent" value="import { Loan, SavingsAccount, DashboardData } from '@/types';&#10;&#10;const STORAGE_KEYS = {&#10;  LOANS: 'finance_dashboard_loans',&#10;  SAVINGS: 'finance_dashboard_savings',&#10;  LAST_REFRESH: 'lastDashboardRefresh'&#10;};&#10;&#10;/**&#10; * Local storage utilities for data persistence&#10; */&#10;export const storage = {&#10;  // Loan operations&#10;  getLoans: (): Loan[] =&gt; {&#10;    try {&#10;      const stored = localStorage.getItem(STORAGE_KEYS.LOANS);&#10;      if (!stored) return [];&#10;&#10;      const loans = JSON.parse(stored);&#10;      return loans.map((loan: any) =&gt; ({&#10;        ...loan,&#10;        startDate: new Date(loan.startDate),&#10;        nextEmiDate: new Date(loan.nextEmiDate),&#10;        lastEmiDate: loan.lastEmiDate ? new Date(loan.lastEmiDate) : undefined,&#10;        partPayments: loan.partPayments.map((pp: any) =&gt; ({&#10;          ...pp,&#10;          date: new Date(pp.date)&#10;        })),&#10;        interestRateChanges: loan.interestRateChanges.map((irc: any) =&gt; ({&#10;          ...irc,&#10;          effectiveDate: new Date(irc.effectiveDate)&#10;        }))&#10;      }));&#10;    } catch (error) {&#10;      console.error('Error loading loans:', error);&#10;      return [];&#10;    }&#10;  },&#10;&#10;  saveLoans: (loans: Loan[]): void =&gt; {&#10;    try {&#10;      localStorage.setItem(STORAGE_KEYS.LOANS, JSON.stringify(loans));&#10;    } catch (error) {&#10;      console.error('Error saving loans:', error);&#10;    }&#10;  },&#10;&#10;  // Savings operations&#10;  getSavings: (): SavingsAccount[] =&gt; {&#10;    try {&#10;      const stored = localStorage.getItem(STORAGE_KEYS.SAVINGS);&#10;      if (!stored) return [];&#10;&#10;      const savings = JSON.parse(stored);&#10;      return savings.map((account: any) =&gt; ({&#10;        ...account,&#10;        dateAdded: new Date(account.dateAdded),&#10;        lastUpdated: new Date(account.lastUpdated)&#10;      }));&#10;    } catch (error) {&#10;      console.error('Error loading savings:', error);&#10;      return [];&#10;    }&#10;  },&#10;&#10;  saveSavings: (savings: SavingsAccount[]): void =&gt; {&#10;    try {&#10;      localStorage.setItem(STORAGE_KEYS.SAVINGS, JSON.stringify(savings));&#10;    } catch (error) {&#10;      console.error('Error saving savings:', error);&#10;    }&#10;  },&#10;&#10;  // Auto-refresh tracking&#10;  getLastRefresh: (): Date | null =&gt; {&#10;    try {&#10;      const stored = localStorage.getItem(STORAGE_KEYS.LAST_REFRESH);&#10;      return stored ? new Date(stored) : null;&#10;    } catch (error) {&#10;      return null;&#10;    }&#10;  },&#10;&#10;  setLastRefresh: (date: Date): void =&gt; {&#10;    try {&#10;      localStorage.setItem(STORAGE_KEYS.LAST_REFRESH, date.toISOString());&#10;    } catch (error) {&#10;      console.error('Error saving last refresh date:', error);&#10;    }&#10;  },&#10;&#10;  // Clear all data&#10;  clearAll: (): void =&gt; {&#10;    Object.values(STORAGE_KEYS).forEach(key =&gt; {&#10;      localStorage.removeItem(key);&#10;    });&#10;  }&#10;};&#10;&#10;/**&#10; * Auto-refresh functionality&#10; */&#10;export const autoRefresh = {&#10;  checkAndRefresh: (): boolean =&gt; {&#10;    const today = new Date();&#10;    const lastRefresh = storage.getLastRefresh();&#10;&#10;    // Auto-refresh on 5th of every month&#10;    if (today.getDate() === 5) {&#10;      if (!lastRefresh || lastRefresh.getMonth() !== today.getMonth()) {&#10;        storage.setLastRefresh(today);&#10;        return true;&#10;      }&#10;    }&#10;&#10;    return false;&#10;  },&#10;&#10;  scheduleNextRefresh: (): Date =&gt; {&#10;    const today = new Date();&#10;    const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 5);&#10;    return nextMonth;&#10;  }&#10;};&#10;" />
              <option name="updatedContent" value="import { Loan, SavingsAccount, DashboardData } from '@/types';&#10;&#10;const STORAGE_KEYS = {&#10;  LOANS: 'finance_dashboard_loans',&#10;  SAVINGS: 'finance_dashboard_savings',&#10;  LAST_REFRESH: 'lastDashboardRefresh'&#10;};&#10;&#10;/**&#10; * Local storage utilities for data persistence&#10; */&#10;export const storage = {&#10;  // Loan operations&#10;  getLoans: (): Loan[] =&gt; {&#10;    try {&#10;      const stored = localStorage.getItem(STORAGE_KEYS.LOANS);&#10;      if (!stored) return [];&#10;&#10;      const loans = JSON.parse(stored);&#10;      return loans.map((loan: any) =&gt; {&#10;        const normalizedPartPayments = Array.isArray(loan.partPayments)&#10;          ? loan.partPayments.map((pp: any) =&gt; ({&#10;              ...pp,&#10;              amount: Number(pp?.amount) || 0,&#10;              date: new Date(pp.date)&#10;            }))&#10;          : [];&#10;&#10;        const normalizedInterestRateChanges = Array.isArray(loan.interestRateChanges)&#10;          ? loan.interestRateChanges.map((irc: any) =&gt; ({&#10;              ...irc,&#10;              oldRate: Number(irc?.oldRate) || 0,&#10;              newRate: Number(irc?.newRate) || 0,&#10;              effectiveDate: new Date(irc.effectiveDate)&#10;            }))&#10;          : [];&#10;&#10;        return {&#10;          ...loan,&#10;          principalAmount: Number(loan?.principalAmount) || 0,&#10;          currentPrincipal: Number(loan?.currentPrincipal) || 0,&#10;          interestRate: Number(loan?.interestRate) || 0,&#10;          emiAmount: Number(loan?.emiAmount) || 0,&#10;          tenure: Number(loan?.tenure) || 0,&#10;          customEmi: loan?.customEmi != null ? Number(loan.customEmi) : undefined,&#10;          startDate: new Date(loan.startDate),&#10;          nextEmiDate: new Date(loan.nextEmiDate),&#10;          lastEmiDate: loan.lastEmiDate ? new Date(loan.lastEmiDate) : undefined,&#10;          partPayments: normalizedPartPayments,&#10;          interestRateChanges: normalizedInterestRateChanges&#10;        } as Loan;&#10;      });&#10;    } catch (error) {&#10;      console.error('Error loading loans:', error);&#10;      return [];&#10;    }&#10;  },&#10;&#10;  saveLoans: (loans: Loan[]): void =&gt; {&#10;    try {&#10;      localStorage.setItem(STORAGE_KEYS.LOANS, JSON.stringify(loans));&#10;    } catch (error) {&#10;      console.error('Error saving loans:', error);&#10;    }&#10;  },&#10;&#10;  // Savings operations&#10;  getSavings: (): SavingsAccount[] =&gt; {&#10;    try {&#10;      const stored = localStorage.getItem(STORAGE_KEYS.SAVINGS);&#10;      if (!stored) return [];&#10;&#10;      const savings = JSON.parse(stored);&#10;      return savings.map((account: any) =&gt; ({&#10;        ...account,&#10;        amount: Number(account?.amount) || 0,&#10;        dateAdded: new Date(account.dateAdded),&#10;        lastUpdated: new Date(account.lastUpdated)&#10;      }));&#10;    } catch (error) {&#10;      console.error('Error loading savings:', error);&#10;      return [];&#10;    }&#10;  },&#10;&#10;  saveSavings: (savings: SavingsAccount[]): void =&gt; {&#10;    try {&#10;      localStorage.setItem(STORAGE_KEYS.SAVINGS, JSON.stringify(savings));&#10;    } catch (error) {&#10;      console.error('Error saving savings:', error);&#10;    }&#10;  },&#10;&#10;  // Auto-refresh tracking&#10;  getLastRefresh: (): Date | null =&gt; {&#10;    try {&#10;      const stored = localStorage.getItem(STORAGE_KEYS.LAST_REFRESH);&#10;      return stored ? new Date(stored) : null;&#10;    } catch (error) {&#10;      return null;&#10;    }&#10;  },&#10;&#10;  setLastRefresh: (date: Date): void =&gt; {&#10;    try {&#10;      localStorage.setItem(STORAGE_KEYS.LAST_REFRESH, date.toISOString());&#10;    } catch (error) {&#10;      console.error('Error saving last refresh date:', error);&#10;    }&#10;  },&#10;&#10;  // Clear all data&#10;  clearAll: (): void =&gt; {&#10;    Object.values(STORAGE_KEYS).forEach(key =&gt; {&#10;      localStorage.removeItem(key);&#10;    });&#10;  },&#10;&#10;  // Export all data&#10;  exportData: (): string =&gt; {&#10;    const loans = storage.getLoans();&#10;    const savings = storage.getSavings();&#10;    const lastRefresh = storage.getLastRefresh();&#10;&#10;    const exportData = {&#10;      loans,&#10;      savings,&#10;      lastRefresh,&#10;      exportDate: new Date().toISOString(),&#10;      version: '1.0'&#10;    };&#10;&#10;    return JSON.stringify(exportData, null, 2);&#10;  },&#10;&#10;  // Import data from JSON string&#10;  importData: (jsonData: string): { success: boolean; message: string } =&gt; {&#10;    try {&#10;      const data = JSON.parse(jsonData);&#10;&#10;      // Validate data structure&#10;      if (!data.loans || !data.savings) {&#10;        return { success: false, message: 'Invalid data format' };&#10;      }&#10;&#10;      // Clear existing data&#10;      storage.clearAll();&#10;&#10;      // Import loans&#10;      if (Array.isArray(data.loans)) {&#10;        // Normalize before saving&#10;        const normalized = data.loans.map((loan: any) =&gt; ({&#10;          ...loan,&#10;          principalAmount: Number(loan?.principalAmount) || 0,&#10;          currentPrincipal: Number(loan?.currentPrincipal) || 0,&#10;          interestRate: Number(loan?.interestRate) || 0,&#10;          emiAmount: Number(loan?.emiAmount) || 0,&#10;          tenure: Number(loan?.tenure) || 0,&#10;          customEmi: loan?.customEmi != null ? Number(loan.customEmi) : undefined,&#10;          partPayments: Array.isArray(loan.partPayments)&#10;            ? loan.partPayments.map((pp: any) =&gt; ({ ...pp, amount: Number(pp?.amount) || 0 }))&#10;            : []&#10;        }));&#10;        storage.saveLoans(normalized);&#10;      }&#10;&#10;      // Import savings&#10;      if (Array.isArray(data.savings)) {&#10;        const normalizedSavings = data.savings.map((s: any) =&gt; ({&#10;          ...s,&#10;          amount: Number(s?.amount) || 0&#10;        }));&#10;        storage.saveSavings(normalizedSavings);&#10;      }&#10;&#10;      // Import last refresh&#10;      if (data.lastRefresh) {&#10;        storage.setLastRefresh(new Date(data.lastRefresh));&#10;      }&#10;&#10;      return { success: true, message: 'Data imported successfully!' };&#10;    } catch (error) {&#10;      return { success: false, message: 'Failed to import data. Please check the file format.' };&#10;    }&#10;  }&#10;};&#10;&#10;/**&#10; * Auto-refresh functionality&#10; */&#10;export const autoRefresh = {&#10;  checkAndRefresh: (): boolean =&gt; {&#10;    const today = new Date();&#10;    const lastRefresh = storage.getLastRefresh();&#10;&#10;    // Auto-refresh on 5th of every month&#10;    if (today.getDate() === 5) {&#10;      if (!lastRefresh || lastRefresh.getMonth() !== today.getMonth()) {&#10;        storage.setLastRefresh(today);&#10;        return true;&#10;      }&#10;    }&#10;&#10;    return false;&#10;  },&#10;&#10;  scheduleNextRefresh: (): Date =&gt; {&#10;    const today = new Date();&#10;    const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 5);&#10;    return nextMonth;&#10;  }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tailwind.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tailwind.config.js" />
              <option name="updatedContent" value="/** @type {import('tailwindcss').Config} */&#10;export default {&#10;  content: [&#10;    &quot;./index.html&quot;,&#10;    &quot;./src/**/*.{js,ts,jsx,tsx}&quot;,&#10;  ],&#10;  theme: {&#10;    extend: {&#10;      colors: {&#10;        primary: {&#10;          50: '#f0f9ff',&#10;          100: '#e0f2fe',&#10;          200: '#bae6fd',&#10;          300: '#7dd3fc',&#10;          400: '#38bdf8',&#10;          500: '#0ea5e9',&#10;          600: '#0284c7',&#10;          700: '#0369a1',&#10;          800: '#075985',&#10;          900: '#0c4a6e',&#10;        },&#10;        glass: {&#10;          light: 'rgba(255, 255, 255, 0.1)',&#10;          medium: 'rgba(255, 255, 255, 0.2)',&#10;          dark: 'rgba(0, 0, 0, 0.1)',&#10;        }&#10;      },&#10;      backdropBlur: {&#10;        xs: '2px',&#10;      },&#10;      animation: {&#10;        'fade-in': 'fadeIn 0.5s ease-in-out',&#10;        'slide-up': 'slideUp 0.3s ease-out',&#10;        'glass-shine': 'glassShine 2s ease-in-out infinite',&#10;      },&#10;      keyframes: {&#10;        fadeIn: {&#10;          '0%': { opacity: '0' },&#10;          '100%': { opacity: '1' },&#10;        },&#10;        slideUp: {&#10;          '0%': { transform: 'translateY(10px)', opacity: '0' },&#10;          '100%': { transform: 'translateY(0)', opacity: '1' },&#10;        },&#10;        glassShine: {&#10;          '0%, 100%': { transform: 'translateX(-100%)' },&#10;          '50%': { transform: 'translateX(100%)' },&#10;        },&#10;      },&#10;    },&#10;  },&#10;  plugins: [],&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tsconfig.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tsconfig.json" />
              <option name="updatedContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;ES2020&quot;,&#10;    &quot;useDefineForClassFields&quot;: true,&#10;    &quot;lib&quot;: [&quot;ES2020&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],&#10;    &quot;module&quot;: &quot;ESNext&quot;,&#10;    &quot;skipLibCheck&quot;: true,&#10;    &quot;moduleResolution&quot;: &quot;bundler&quot;,&#10;    &quot;allowImportingTsExtensions&quot;: true,&#10;    &quot;resolveJsonModule&quot;: true,&#10;    &quot;isolatedModules&quot;: true,&#10;    &quot;noEmit&quot;: true,&#10;    &quot;jsx&quot;: &quot;react-jsx&quot;,&#10;    &quot;strict&quot;: true,&#10;    &quot;noUnusedLocals&quot;: true,&#10;    &quot;noUnusedParameters&quot;: true,&#10;    &quot;noFallthroughCasesInSwitch&quot;: true,&#10;    &quot;baseUrl&quot;: &quot;.&quot;,&#10;    &quot;paths&quot;: {&#10;      &quot;@/*&quot;: [&quot;./src/*&quot;]&#10;    }&#10;  },&#10;  &quot;include&quot;: [&quot;src&quot;],&#10;  &quot;references&quot;: [{ &quot;path&quot;: &quot;./tsconfig.node.json&quot; }]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tsconfig.node.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tsconfig.node.json" />
              <option name="updatedContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;composite&quot;: true,&#10;    &quot;skipLibCheck&quot;: true,&#10;    &quot;module&quot;: &quot;ESNext&quot;,&#10;    &quot;moduleResolution&quot;: &quot;bundler&quot;,&#10;    &quot;allowSyntheticDefaultImports&quot;: true&#10;  },&#10;  &quot;include&quot;: [&quot;vite.config.ts&quot;]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vite.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vite.config.ts" />
              <option name="updatedContent" value="import { defineConfig } from 'vite'&#10;import react from '@vitejs/plugin-react'&#10;&#10;// https://vitejs.dev/config/&#10;export default defineConfig({&#10;  plugins: [react()],&#10;  server: {&#10;    port: 3000,&#10;    open: true&#10;  },&#10;  resolve: {&#10;    alias: {&#10;      '@': '/src'&#10;    }&#10;  }&#10;})" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>